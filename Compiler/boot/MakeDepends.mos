// echo(false);
runScript("LoadCompilerInterface.mos");
if not generateSeparateCodeDependenciesMakefile("Makefile.depends",directory="$(GEN_DIR)",suffix=".stamp") then
  print("Failed to generate dependencies:\n" + getErrorString());
  exit(1);
end if;
exit(0);
/*
frontEndFiles := {
  "Absyn",
  "Algorithm",
  "Builtin",
  "CevalFunction",
  "Ceval",
  "CheckModel",
  "ClassInf",
  "ClassLoader",
  "ComponentReference",
  "ConnectionGraph",
  "Connect",
  "ConnectUtil",
  "Constants",
  "DAEDump",
  "DAE",
  "DAEUtil",
  "DumpGraphviz",
  "Dump",
  "ExpressionDump",
  "Expression",
  "ExpressionSimplify",
  "ExpressionSimplifyTypes",
  "Graphviz",
  "Inline",
  "InnerOuter",
  "Inst",
  "InstVar",
  "InstDAE",
  "InstFunction",
  "InstBinding",
  "InstUtil",
  "InstExtends",
  "InstSection",
  "InstTypes",
  "Lookup",
  "MetaUtil",
  "MMath",
  "Mod",
  "OperatorOverloading",
  "Parser",
  "ParserExt",
  "Patternm",
  "Prefix",
  "PrefixUtil",
  "SCode",
  "SCodeDump",
  "SCodeUtil",
  "Static",
  "SCodeSimplify",
  "NFBuiltin",
  "NFConnect2",
  "NFConnectCheck",
  "NFConnectEquations",
  "NFConnectUtil2",
  "NFConnectionSets",
  "NFEnv",
  "NFEnvAvlTree",
  "NFEnvExtends",
  "NFExpandableConnectors",
  "NFInst",
  "NFInstDump",
  "NFInstFlatten",
  "NFInstPrefix",
  "NFInstSymbolTable",
  "NFInstTypes",
  "NFInstTypesOld",
  "NFInstUtil",
  "NFLookup",
  "NFMod",
  "NFRedeclare",
  "NFSCodeDependency",
  "NFSCodeEnv",
  "NFSCodeExpand",
  "NFSCodeFlattenImports",
  "NFSCodeFlatten",
  "NFSCodeFlattenRedeclare",
  "NFSCodeLookup",
  "NFSCodeMod",
  "NFSCodeCheck",
  "NFTypeCheck",
  "NFTyping",
  "Types",
  "UnitAbsynBuilder",
  "UnitAbsyn",
  "UnitChecker",
  "UnitParserExt",
  "Values",
  "ValuesUtil",
  "FBuiltin",
  "FCore",
  "FExpand",
  "FGraph",
  "FGraphBuild",
  "FGraphBuildEnv",
  "FGraphDump",
  "FGraphStream",
  "FInst",
  "FLookup",
  "FMod",
  "FNode",
  "FResolve",
  "FTraverse",
  "FVisit"
};
backEndFiles := {
  "SerializeModelInfo", // TODO: Add once we bootstrapped omc
  "BackendDAE",
  "BackendDAEFunc",
  "BackendDAECreate",
  "BackendDAEEXT",
  "BackendDAEOptimize",
  "BackendDAETransform",
  "BackendDAEUtil",
  "BackendDump",
  "BackendEquation",
  "BackendQSS",
  "BackendVariable",
  "BackendVarTransform",
  "BinaryTree",
  "BinaryTreeInt",
  "Causalize",
  "DAEQuery",
  "Differentiate",
  "DumpHTML",
  "DynamicOptimization",
  "EvaluateFunctions",
  "EvaluateParameter",
  "ExpressionSolve",
  "FindZeroCrossings",
  "HpcOmBenchmark",
  "HpcOmBenchmarkExt",
  "HpcOmEqSystems",
  "HpcOmMemory",
  "HpcOmScheduler",
  "HpcOmSchedulerExt",
  "HpcOmTaskGraph",
  "IndexReduction",
  "InlineArrayEquations",
  "Initialization",
  "Matching",
  "MathematicaDump",
  "OnRelaxation",
  "OpenTURNS",
  "RemoveSimpleEquations",
  "ResolveLoops",
  "SynchronousFeatures",
  "Tearing",
  "Uncertainties",
  "UnitCheck",
  "XMLDump",
  "HpcOmSimCode",
  "HpcOmSimCodeMain",
  "SimCode",
  "SimCodeMain",
  "SimCodeUtil",
  "SimCodeVar",
  "AbsynDumpTpl",
  "CodegenAdevs",
  "CodegenC",
  "CodegenCpp",
  "CodegenCppHpcom",
  "CodegenFMU",
  "CodegenFMUCpp",
  "CodegenCSharp",
  "CodegenJava",
  "CodegenJS",
  "CodegenModelica",
  "CodegenQSS",
  "CodegenSparseFMI",
  "CodegenUtil",
  "CodegenXML",
  "DAEDumpTpl",
  "ExpressionDumpTpl",
  "GraphvizDump",
  "GraphMLDumpTpl",
  "NFInstDumpTpl",
  "SCodeDumpTpl",
  "SimCodeDump",
  "TaskSystemDump",
  "TplAbsyn",
  "TplCodegen",
  "TplMain",
  "Tpl",
  "TplParser",
  "Unparsing"
};
utilFiles := {
  "File",
  "CevalScript",
  "GlobalScript",
  "StaticScript",
  "Interactive",
  "Refactor",
  "RewriteRules",
  "Figaro",
  "BlockCallRewrite",
  "Global",
  "Main",
  "AvlTreeString",
  "BaseHashTable",
  "BaseHashSet",
  "Config",
  "Corba",
  "Debug",
  "DynLoad",
  "ErrorExt",
  "Error",
  "Flags",
  "FMI",
  "FMIExt",
  "Graph",
  "GraphML",
  "GraphStream",
  "GraphStreamExt",
  "HashSet",
  "HashSetString",
  "HashTable2",
  "HashTable3",
  "HashTable4",
  "HashTable5",
  "HashTableCG",
  "HashTableCrILst",
  "HashTableExpToExp",
  "HashTableCrIntToExp",
  "HashTableCrToExpSourceTpl",
  "HashTable",
  "HashTableExpToIndex",
  "HashTablePathToFunction",
  "HashTableStringToPath",
  "IOStreamExt",
  "IOStream",
  "Lapack",
  "List",
  "ModelicaExternalC",
  "Print",
  "PriorityQueue",
  "Settings",
  "SimulationResults",
  "TaskGraphResults",
  "Socket",
  "System",
  "Util",
  "VarTransform"
};
packages := {typeNameString(cl) for cl in getClassNames(sort=true)};
strs := sortStrings(cat(1, frontEndFiles, backEndFiles, utilFiles));
if size(packages,1) <> size(strs,1) then
  print("Could not determine if front-end packages call allowed packages since the number of packages differ");
  exit(1);
end if;
if not min(p==s threaded for p in packages, s in strs) then
  print("Could not determine if front-end packages call allowed packages since the names of packages differ");
  exit (1);
end if;
getErrorString();
checkFrontEndBackEndInterface(frontEndFiles=frontEndFiles,backendFiles=backendFiles,utilFiles=utilFiles);
*/
