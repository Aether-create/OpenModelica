#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Comparison of mine to Saldamlis extension
\end_layout

\begin_layout Standard
According to 4th chapter in theses of Levon Saldamli.
\end_layout

\begin_layout Standard

\series bold
4.2.1 Field Variables
\series default
 -- used
\end_layout

\begin_layout Standard

\series bold
4.2.2 Field Constructor
\series default
 -- used, slightly modified -- 
\family typewriter
field(expr in domainName.regionName);
\family default
 in 
\family typewriter
expr
\family default
 appears only coordinate variables defined in 
\family typewriter
domainName
\end_layout

\begin_layout Standard

\series bold
4.2.3 Field Type in Expressions
\end_layout

\begin_layout Standard
- 4.2.3.1 
\series bold
Binary operators
\series default
 -- used
\end_layout

\begin_layout Standard
- 4.2.3.2 
\series bold
Special operators
\series default
 -- for time derivative of field should be used pder operator instead of
 der 
\end_layout

\begin_layout Standard

\series bold
4.2.4 Accessing Field Values
\series default
 -- Accesing field values in function-like style should not be allowed,
 if possible, for two reasons:
\end_layout

\begin_layout Itemize
it is not allowed in current Modelica for regular variables (unknown functions
 of time) 
\end_layout

\begin_layout Itemize
If more then one coordinate system are defined in a domain, it is not clear
 which coordinates are used in the function-like expression
\end_layout

\begin_layout Standard
Regions consisting of one point and the 
\family typewriter
in
\family default
 operator will be used instead.
 e.g.
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family typewriter
model heatPID
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

record Room extends DomainBlock3D;
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Region0D sensorPosition(shape = shapeFunc, range = {{1, 1}, {0.5, 0.5}, {0.5,
 0.5}});
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

end Room
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Room room(...)
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

field Real T(domain = room);
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Real Ts;
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

...
\end_layout

\begin_layout Plain Layout

\family typewriter
equation
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Ts = T in room.sensorPosition;
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

...
\end_layout

\begin_layout Plain Layout

\family typewriter
end heatPid;
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\series bold
4.3.1.
 Domains Geometry Deffinition
\end_layout

\begin_layout Standard
Main difference: Saldamli describes boundary by curves in 2D resp.
 surfaces in 3D and thus specifies the domain shape.
 
\end_layout

\begin_layout Standard
This approach doesn't work very well in 3D.
 If boundary is made of several surfaces in 3D, parameters (arguments) of
 shape-functions of these surfaces would heve to be bounded not just in
 cartesian product of intervals but in some more complex sets to compose
 continuous boundary.
 And there is no way to write this in Levons extension.
\end_layout

\begin_layout Standard
I prefare the way used in Peters book -- write a function (or equation)
 that maps an cartesian product of intervals onto the interior and other
 regions of the domain.
 I don't think this approach can describe more complicated geometries in
 3D, but is closer to the way how such a region (subsets of 
\begin_inset Formula $R^{n}$
\end_inset

) is usualy described in mathematics.
 I think it will be aslo easier to generate the computational grid if we
 have a function or equation that maps cartesian product on the domain.
\end_layout

\begin_layout Standard
There are two ways for the seccond approach:
\end_layout

\begin_layout Itemize
using shape-function (used in the book)
\end_layout

\begin_layout Itemize
using equations holding coordinate transformations and define always some
 general coordinates that are bounded in cartesian product of intervals
\end_layout

\begin_layout Standard
For illustration see domain_comparison.lyx/pdf file.
\end_layout

\begin_layout Standard
This way of domain deffinition should be supplemented with Constructive
 Solid Geometry -- it is building more complex domains using union, intersection
 and difference of previously defined domains.
 This is not designed already.
 It should be also possible define domain in external file from some CAD
 app.
\end_layout

\begin_layout Standard
4.3.1.1 
\series bold
Domain Type
\series default
 similar (built-in) - In both cases all domains extends general built-in
 
\family typewriter
Domain
\family default
 type.
 Saldamlis built-in 
\family typewriter
Domain
\family default
 has different members.
 We have only 
\family typewriter
replaceable Region interior;
\end_layout

\begin_layout Standard
3.2.1.2 
\series bold
Boundary type
\series default
 (built-in) -- we don't needed it.
 Here is 
\family typewriter
Region0D, Region1D, Region2D
\family default
 and 
\family typewriter
Region3D
\family default
 built-in type to describe boundaries, interior and other regions in the
 domain instead.
\end_layout

\begin_layout Standard
4.3.1.3 
\series bold
Coordinate Systems 
\series default
Saldamlis domain always has cartesian coordinates defined.
 I would not insist on this.
\end_layout

\begin_layout Standard
I'm not shure if we shell have a spetial data type 
\family typewriter
Coordinate
\family default
, or it should be of type 
\family typewriter
Real
\family default
 and compiler itself would infere that a variable is a coordinate that must
 be treated in a special way.
 Other option is to consider the variable type as somethink different from
 a data type because coordinate variable indeed doesn't hold any data and
 has a symbolic meaning (somethink like 
\family typewriter
time
\family default
).
 Than coordinates could be perhaps defined using keyword with lower case:
\end_layout

\begin_layout Standard

\family typewriter
coordinate x;
\end_layout

\begin_layout Standard

\series bold
4.3.2 Differential Operators
\end_layout

\begin_layout Standard
4.3.2.1 
\series bold
Partial derivative 
\series default
Saldamli uses 
\family typewriter
der(u,x,y..)
\family default
, here 
\family typewriter
pder(u,x,y..).

\family default
 Time derivatives should not be written as 
\family typewriter
(p)der(u)
\family default
 but 
\family typewriter
also pder(u,time).
\end_layout

\begin_layout Standard
4.3.2.2 
\series bold
Normal derivative
\series default
 (or rather normal vector) - similar, unfinished design.
 It perhaps should be member of the region, e.g.:
\end_layout

\begin_layout Standard
pder(u
\family typewriter
,omega.boundary.n) = 0 in omega.boundary;
\end_layout

\begin_layout Standard
or an operator applied on a region, somethink like:
\end_layout

\begin_layout Standard

\family typewriter
pder(u,normal(omega.boundary)) = 0;
\end_layout

\begin_layout Standard
Writing boundary conditions using normal vector but outside differentiation
 should be also allowed e.g.:
\end_layout

\begin_layout Standard

\family typewriter
field Real[3] flux;
\end_layout

\begin_layout Standard

\family typewriter
flux*region.n = 0 in omega.boundary; //*scalar product
\end_layout

\begin_layout Standard
4.3.2.3 
\series bold
Vector notation 
\series default
-- coordinate-free differential operators as 
\family typewriter
gradient
\family default
, 
\family typewriter
divergence, rotation
\family default
 ...
 I didn't work up how to define this.
 Could be accepted.
\end_layout

\begin_layout Standard

\series bold
4.3.3 Domain Specifier in Equations
\end_layout

\begin_layout Standard
keyword 
\family typewriter
in
\family default
 accepted.
 Should be used not only for boundary conditions but also for PDE to specifie
 region and to acces field values in particular points (example above).
\end_layout

\begin_layout Standard

\series bold
4.3.4 Field Reduction 
\series default
-- integral operator.
 I didn't consider yet, coul'd be perhaps undertaken.
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\series bold
Other notes:
\end_layout

\begin_layout Standard
Equations may be written within or outside domain class.
 Outside domain coordinates must be accesd of course 
\family typewriter
domainName.coordName
\family default
.
 To make a shortcut we introduced 
\family typewriter
region
\family default
 and 
\family typewriter
domain
\family default
 (or 
\family typewriter
dom
\family default
) keywords as a alias for domain and region specified after 
\family typewriter
in 
\family default
op.
 
\end_layout

\begin_layout Standard
To acces region we can write
\end_layout

\begin_layout Standard

\family typewriter
pder(u,region.n) = 0 in omega.boundary;
\end_layout

\begin_layout Standard
similarly for domain
\end_layout

\begin_layout Standard

\family typewriter
pder(u,dom.x) in omega.interior;
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
It shoud be possible to write equations that relates field defined in different
 domains.
 This is not designed yet.
\end_layout

\end_body
\end_document
