#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 3cm
\rightmargin 3cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Comparison of mine to Saldamlis extension
\end_layout

\begin_layout Title
Changes over Levon's extension
\end_layout

\begin_layout Standard
New extension is compared to Levon's work (
\begin_inset CommandInset citation
LatexCommand cite
key "saldamli2006pdemodelica"

\end_inset

), mostly chapter 4
\end_layout

\begin_layout Part*
Domains 
\series bold
Geometry Definition
\end_layout

\begin_layout Paragraph*

\series bold
Originally
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
see 
\begin_inset CommandInset citation
LatexCommand cite
key "saldamli2006pdemodelica"

\end_inset

 -- 4.3.1.1 and 4.3.1.2
\end_layout

\begin_layout Standard
Saldamli defines domain shape by listing its boundaries.
 Individual boundaries (points in 1D, curves in 2D resp.
 surfaces in 3D) are describes by shape-functions.
 Shape-function maps intervals ([0,1] in 2D -- boundary is a curve, [0,1]
\begin_inset Formula $\times$
\end_inset

[0,1] in 3D -- a surface) onto the boundary.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Example rectangular domain
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "80text%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
class Line
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset


\family default
extends Boundary(ndims=2);
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset


\family default
parameter Point p1;
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset


\family default
parameter Point p2;
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset


\family default
redeclare function shape
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset


\begin_inset space \quad{}
\end_inset


\family default
input Real u[1];
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset


\begin_inset space \quad{}
\end_inset


\family default
output Real coord[2];
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset


\family default
algorithm
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset


\begin_inset space \quad{}
\end_inset


\family default
coord := p1 + u*(p2-p1);
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset


\family default
end shape;
\end_layout

\begin_layout Plain Layout
end Line;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "80text%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family typewriter
type RectangularDomain
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

extends Cartesian2D (boundary ={left, bottom, right, top});
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

parameter Point p;
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

parameter Real w;
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

parameter Real h;
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

parameter Point p2 = Point(p.x+w, p.y);
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

parameter Point p3 = Point(p.x+w, p.y+h);
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

parameter Point p4 = Point(p, p.y+h);
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

parameter Line bottom = Line(p, p2);
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

parameter Line right = Line(p2, p3);
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

parameter Line top = Line(p3, p4);
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

parameter Line left = Line(p4, p);
\end_layout

\begin_layout Plain Layout

\family typewriter
end RectangularDomain;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace defskip
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Example circular domain
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "80text%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family typewriter
class Circle
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

extends Boundary(ndims=2);
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

parameter Point c = {0,0};
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

parameter Real r = 1;
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

redeclare function shape
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset


\begin_inset space \quad{}
\end_inset

input Real tau;
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

//tau in [0,1]
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset


\begin_inset space \quad{}
\end_inset

output Real coord[2];
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

algorithm
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset


\begin_inset space \quad{}
\end_inset

coord := c + r * { cos(2*Pi*tau), sin(2*Pi*tau) };
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

end shape;
\end_layout

\begin_layout Plain Layout

\family typewriter
end Circle;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "80text%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family typewriter
type CircularDomain
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

extends Cartesian2D(boundary = {circle});
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

parameter Point center;
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

parameter Real radius;
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

parameter Circle circle (c = center, r = radius);
\end_layout

\begin_layout Plain Layout

\family typewriter
end CircularDomain;
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph*

\series bold
Problem
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
This approach doesn't work well in 3D: if boundary is made of several surfaces,
 parameters (arguments) of shape-functions of these surfaces must be bounded
 not just in [0,1] intervals but in some more complex sets to compose continuous
 boundary, e.g.
 see fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Boundary-in-3D"

\end_inset

.
 And there is no way to write this in Levon's extension.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/Boolean_difference.PNG
	width 40col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Boundary in 3D
\begin_inset CommandInset label
LatexCommand label
name "fig:Boundary-in-3D"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
There is also no simple way to generate grid points during translation/solution.
\end_layout

\begin_layout Paragraph*

\series bold
Alternative approach
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
According to Peter's book 
\begin_inset CommandInset citation
LatexCommand cite
key "fritzson2010principles"

\end_inset

 -- 8.5.2, define interior and boundaries of domain (these elements we call
 
\emph on
regions
\emph default
 here) with one shape-function and for each region specify intervals for
 the shape-function arguments.
 This approach isn't more general, but is consistent in 1, 2 and 3D and
 (to me) is more natural.
 Inner points may be generated using this shape-function.
\end_layout

\begin_layout Standard
Modified 
\family typewriter
Domain
\family default
 built-in type:
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "80text%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family typewriter
type Domain
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

parameter Integer ndims;
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Real cartesian[ndims];
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Real coord[ndims] = cartesian;
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

replaceable Region interior;
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

replaceable function shape
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

input Real u[ndims];
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

output Real coord[ndims];
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

end shape;
\end_layout

\begin_layout Plain Layout

\family typewriter
end Domain;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
Region
\family default
 built-in type instead of 
\family typewriter
Boundary:
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "80text%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family typewriter
type Region
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

parameter Integer ndims;
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

//dim of space
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

parameter Integer ndimr;
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

//dim of region
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

parameter Real[ndims][2] interval;
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

replaceable function shape;
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

input Real u[ndim];
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

output Real coord[ndims];
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

end shape;
\end_layout

\begin_layout Plain Layout

\family typewriter
end Region;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Example circular domain:
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "80text%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family typewriter
class DomainCircular2D
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

extends Domain;
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

parameter Real radius;
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

parameter Real[2] c = {0,0};
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

function shapeFunc
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

input Real r,v;
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

output Real coord[2];
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

algorithm
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

coord := c + radius * r * { cos(2*Pi*v), sin(2*Pi*v) };
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

end shapeFunc;
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Region2D interior(shape = shapeFunc, interval = {{O,1},{O,1}});
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Region1D boundary(shape = shapeFunc, interval = {1,{0,1}});
\end_layout

\begin_layout Plain Layout

\family typewriter
end DomainCircular2D;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Paragraph*

\series bold
Modified version
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
use equations instead of shape-function
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "80text%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family typewriter
class DomainCircular2D
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

extends Domain;
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

parameter Real radius = 1;
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

parameter Real c = {0,0};
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Real r, theta;
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Region2D interior(theta in (O,2*C.pi), r in (O,radius));
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Region1D boundary(theta in (O,2*C.pi), r = radius);
\end_layout

\begin_layout Plain Layout

\family typewriter
equation
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

//coordinate transformation equation:
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

coord = c + r * { cos(theta), sin(theta) }; 
\end_layout

\begin_layout Plain Layout

\family typewriter
end DomainCircular2D;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Levon
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Peters book
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Peters book --modified
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "33col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
class Line
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset


\family default
extends Boundary(ndims=2);
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset


\family default
parameter Point p1;
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset


\family default
parameter Point p2;
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset


\family default
redeclare function shape
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset


\begin_inset space \quad{}
\end_inset


\family default
input Real u[1];
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset


\begin_inset space \quad{}
\end_inset


\family default
output Real coord[2];
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset


\family default
algorithm
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset


\begin_inset space \quad{}
\end_inset


\family default
coord := p1 + u*(p2-p1);
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset


\family default
end shape;
\end_layout

\begin_layout Plain Layout
end Line;
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset


\end_layout

\begin_layout Plain Layout

\family typewriter
type RectangularDomain
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

extends Cartesian2D (boundary ={left, bottom, right, top});
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

parameter Point p;
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

parameter Real w;
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

parameter Real h;
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

parameter Point p2 = Point(p.x+w, p.y);
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

parameter Point p3 = Point(p.x+w, p.y+h);
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

parameter Point p4 = Point(p, p.y+h);
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

parameter Line bottom = Line(p, p2);
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

parameter Line right = Line(p2, p3);
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

parameter Line top = Line(p3, p4);
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

parameter Line left = Line(p4, p);
\end_layout

\begin_layout Plain Layout

\family typewriter
end RectangularDomain;
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "33col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family typewriter
class DomainRectangle2D
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

extends Domain;
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

parameter Real Lx;
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

parameter Real Ly;
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

parameter Real ax;
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

parameter Real ay;
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

function shapeFunc
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset


\begin_inset space \quad{}
\end_inset

input Real v1, v2;
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset


\begin_inset space \quad{}
\end_inset

output Real x = ax + Lx * v1, y = ay + Ly * v2;
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

end shapeFunc;
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

Coordinate x (name = "cartesian");
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

Coordinate y (name = "cartesian");
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

Region2D interior(shape = shapeFunc, interval = {{0,1},{0,1}});
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

Region1D right(shape = shapeFunc, interval = {1,{0,1}});
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

Region1D bottom(shape = shapeFunc, interval = {{0,1},0});
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

Region1D left(shape = shapeFunc, interval = {0,{0,1}});
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

Region1D top(shape = shapeFunc, interval = {{0,1},1});
\end_layout

\begin_layout Plain Layout

\family typewriter
end DomainRectangle2D;
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "33col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family typewriter
class DomainRectangle2D
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

extends Domain;
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

Coordinate x (name = "cartesian");
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

Coordinate y (name = "cartesian");
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

parameter Real a1; //x-coordinate of left side
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

parameter Real a2; //y-coorinate of lower side
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

parameter Real b1; //x-coordinate of right side
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

parameter Real b2; //y-coorinate of upper side
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

Region2D interior (x in {a1,b1}, y in {a2,b2}); //or rather (x,y) in {a1,b1}@{a2
,b2}
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

Region1D right (x = a, y in {a2,b2});
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

Region1D bottom (x in {a1,b1}, y = b1);
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

Region1D left (x = a1, y = {a2,b2});
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \quad{}
\end_inset

Region1D top (x in {a1,b1}, y = b2);
\end_layout

\begin_layout Plain Layout

\family typewriter
end DomainRectangle2D; 
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "33col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family typewriter
type CircularDomain
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

extends Cartesian2D(boundary = circle);
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

parameter Point center;
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

parameter Real radius;
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

parameter Circle circle (c = center, r = radius);
\end_layout

\begin_layout Plain Layout

\family typewriter
end CircularDomain
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "33col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family typewriter
class DomainCircular2D
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

extends Domain;
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

parameter Real radius;
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

parameter Real cx = 0;
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

parameter Real cy = 0;
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

function shapeFunc
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

input Real r,v;
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

output Real x,y;
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

algorithm
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

x:=cx + radius * r * cos(2 * C.pi * v)
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

y:=cy + radius * r * sin(2 * C.pi * v);
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

end shapeFunc;
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Coordinate x (name="cartesian");
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Coordinate y (name="cartesian";
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Region2D interior(shape = shapeFunc, interval = {{O,1},{O,1}});
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Region1D boundary(shape = shapeFunc, interval = {1,{0,1}});
\end_layout

\begin_layout Plain Layout

\family typewriter
end DomainCircular2D;
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "33col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family typewriter
class DomainCircular2D
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

extends Domain;
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

parameter Real radius = 1;
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

parameter Real cx = 0;
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

parameter Real cy = 0;
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Coordinate x (name="cartesian");
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Coordinate y (name="cartesian";
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Coordinate r (name="polar");
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Coordinate theta (name="polar");
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Region2D interior(theta in (O,2*C.pi), r in (O,radius));
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Region1D boundary(theta in (O,2*C.pi), r = radius);
\end_layout

\begin_layout Plain Layout

\family typewriter
equation
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

x = r*cos(theta) + cx;
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

y = r*sin(theta) + cy;
\end_layout

\begin_layout Plain Layout

\family typewriter
end DomainCircular2D;
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
More complex geometries
\end_layout

\begin_layout Standard
More complex geometries may be defined using 
\emph on
Constructive Solid Geometry
\emph default
 -- it is applying union, intersection and difference on previously defined
 shapes.
 The syntax is not designed already.
 It should be also possible to define domain in external file from some
 CAD app.
\end_layout

\begin_layout Part*
Differential operators
\end_layout

\begin_layout Standard
4.3.2
\end_layout

\begin_layout Section*
Partial derivatives
\end_layout

\begin_layout Paragraph*
Originaly
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
see 4.3.2.1
\end_layout

\begin_layout Standard
e.g.
 
\family typewriter

\begin_inset Formula $\frac{\partial u}{\partial t}$
\end_inset


\family default
 ..
 
\family typewriter
der(u), 
\begin_inset Formula $\frac{\partial^{2}u}{\partial x\partial y}$
\end_inset


\family default
 ..
 
\family typewriter
der(u,x,y)
\end_layout

\begin_layout Paragraph*
Problem
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
There is no way to write mixed time and space derivative 
\begin_inset Formula $\frac{\partial^{2}u}{\partial x\partial t}$
\end_inset

 in this notation.
\end_layout

\begin_layout Standard
This notation doesn't agree with mathematics, where we have different operators
 for ordinary (
\begin_inset Formula $\frac{du}{dx}$
\end_inset

) and partial (
\begin_inset Formula $\frac{\partial u}{\partial x}$
\end_inset

) derivatives.
 
\end_layout

\begin_layout Standard

\family typewriter
der(u)
\family default
 for partial time derivative is confusing.
\end_layout

\begin_layout Paragraph*
Alternative approach
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
\begin_inset Formula $\frac{\partial u}{\partial t}$
\end_inset


\family default
 ..

\family typewriter
 pder(u,time)
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset Formula $\frac{\partial^{2}u}{\partial x\partial y}$
\end_inset


\family default
 ..
 
\family typewriter
pder(u,x,y)
\end_layout

\begin_layout Standard
Now we can also write 
\begin_inset Formula $\frac{\partial^{2}u}{\partial x\partial t}$
\end_inset

 as 
\family typewriter
pder(u,x,time)
\end_layout

\begin_layout Section*

\series bold
Normal derivative and normal vector
\end_layout

\begin_layout Paragraph*
Originaly
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
see 4.3.2.2
\end_layout

\begin_layout Standard
normal vector is implicit member of domain
\end_layout

\begin_layout Paragraph*
Problem
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Normal vector makes sense only in regions of dimension 
\emph on
n-1
\emph default
 in 
\emph on
n
\emph default
-dimensional domain (i.e.
 surface in 3D, curve in 2D and point in 1D).
 There is no normal vector in 
\emph on
n
\emph default
 dimensional region and infinitely many in less than 
\emph on
n-1
\emph default
 dimensional regions.
\end_layout

\begin_layout Paragraph*
Alternative approach
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
normal vector 
\family typewriter
n
\family default
 is implicit member of all 
\emph on
n-1
\emph default
 dimensional regions in 
\emph on
n
\emph default
-dimensional domain.
 So we write
\end_layout

\begin_layout Standard

\family typewriter
pder(u,omega.boundary.n) = 0 in omega.boundary;
\end_layout

\begin_layout Standard
some shortcuts suggested later.
\end_layout

\begin_layout Standard
Using normal vector outside differential operators should be also possible
 e.g.:
\end_layout

\begin_layout Standard

\family typewriter
field Real[3] flux;
\end_layout

\begin_layout Standard

\family typewriter
flux*omega.boundary.n = 0 in omega.boundary; //*scalar product
\end_layout

\begin_layout Subsection*
Accessing coordinates and normal vector in der() operator
\end_layout

\begin_layout Paragraph*
Problem
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Coordinates and normal vector are defined within the domain class, but they
 are used in equations that are written outside domains.
 Thus they should be accessed using 
\family typewriter
domainName.

\family default
 prefix (e.g.
 
\family typewriter
omega.x
\family default
), which is tedious.
\end_layout

\begin_layout Standard
In the example in 4.3.2.2 the normal vactor 
\family typewriter
n
\family default
 is reached outside the domain class without 
\family typewriter
domainName.

\family default
 prefix eventhou it is defined in the domain
\family typewriter
.

\family default
 It is not explained how this is enabled.
\end_layout

\begin_layout Paragraph*
Solution
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Fields are differentiated with respect to coordinates or normal vector only
 (or may be also some other vector for directional derivative??).
 Thus in place of second and following operands of 
\family typewriter
pder()
\family default
 operator may be given only coordinates or normal vector.
 So variables in this positions may be treated specialy and coordinates
 and normal vector of the domain of the field being differentiated may be
 accessed without the 
\family typewriter
domainName.

\family default
 prefix here.
\end_layout

\begin_layout Standard
If coordinates or normal vector is used in different way (not in place of
 second and following operands of 
\family typewriter
pder()
\family default
), an alias for it may be defined in the model, e.g.
\end_layout

\begin_layout Standard

\family typewriter
Real x = omega.x; 
\end_layout

\begin_layout Standard
or
\family typewriter
 (discussed later)
\end_layout

\begin_layout Standard

\family typewriter
coordinate Real x = omega.x;
\end_layout

\begin_layout Part*
Start values of derivatives
\end_layout

\begin_layout Paragraph*
problem
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Higher derivatives allowed for fileds thus we need to assign initial values
 to its derivatives sometimes.
\end_layout

\begin_layout Paragraph*
solution
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
New attributes 
\family typewriter
startPrime
\family default
 and 
\family typewriter
startSecond
\family default
 (May be for 
\family typewriter
startSecond
\family default
 is not needed??) field variables are introduced.
 Usage e.g.:
\end_layout

\begin_layout Standard

\family typewriter
field Real u(start = 0, startPrime = field(sin(x*y) for (x,y) in omega);
\begin_inset Newline newline
\end_inset


\family default
Initial values for higher derivatives must be assigned in 
\family typewriter
initial equation
\family default
 section.
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "bibliography"
options "plain"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Part*
Accessing field values
\end_layout

\begin_layout Part*
Usage of 
\family typewriter
in
\family default
 operator
\end_layout

\begin_layout Part*
Coordinates and consequent changes
\end_layout

\begin_layout Section*
Coordinates
\end_layout

\begin_layout Section*
Field literal constructor
\end_layout

\begin_layout Plain Layout
\begin_inset Note Note
status open

\begin_layout Plain Layout
Původní:
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
According to 4th chapter in theses of Levon Saldamli.
\end_layout

\begin_layout Plain Layout

\series bold
4.2.1 Field Variables
\series default
 -- used
\end_layout

\begin_layout Plain Layout

\series bold
4.2.2 Field Constructor
\series default
 -- used, slightly modified -- 
\family typewriter
field(expr in domainName.regionName);
\family default
 in 
\family typewriter
expr
\family default
 appears only coordinate variables defined in 
\family typewriter
domainName
\end_layout

\begin_layout Plain Layout

\series bold
4.2.3 Field Type in Expressions
\end_layout

\begin_layout Plain Layout
- 4.2.3.1 
\series bold
Binary operators
\series default
 -- used
\end_layout

\begin_layout Plain Layout
- 4.2.3.2 
\series bold
Special operators
\series default
 -- for time derivative of field should be used pder operator instead of
 der 
\end_layout

\begin_layout Plain Layout

\series bold
4.2.4 Accessing Field Values
\series default
 -- Accesing field values in function-like style should not be allowed,
 if possible, for two reasons:
\end_layout

\begin_layout Itemize
it is not allowed in current Modelica for regular variables (unknown functions
 of time) 
\end_layout

\begin_layout Itemize
If more then one coordinate system are defined in a domain, it is not clear
 which coordinates are used in the function-like expression
\end_layout

\begin_layout Plain Layout
Regions consisting of one point and the 
\family typewriter
in
\family default
 operator will be used instead.
 e.g.
\end_layout

\begin_layout Plain Layout
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family typewriter
model heatPID
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

record Room extends DomainBlock3D;
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Region0D sensorPosition(shape = shapeFunc, range = {{1, 1}, {0.5, 0.5}, {0.5,
 0.5}});
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

end Room
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Room room(...)
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

field Real T(domain = room);
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Real Ts;
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

...
\end_layout

\begin_layout Plain Layout

\family typewriter
equation
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Ts = T in room.sensorPosition;
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

...
\end_layout

\begin_layout Plain Layout

\family typewriter
end heatPid;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\series bold
4.3.1.
 Domains Geometry Definition
\end_layout

\begin_layout Plain Layout
Main difference: Saldamli describes boundary by curves in 2D resp.
 surfaces in 3D and thus specifies the domain shape.
 
\end_layout

\begin_layout Plain Layout
This approach doesn't work very well in 3D.
 If boundary is made of several surfaces in 3D, parameters (arguments) of
 shape-functions of these surfaces would heve to be bounded not just in
 cartesian product of intervals but in some more complex sets to compose
 continuous boundary.
 And there is no way to write this in Levons extension.
\end_layout

\begin_layout Plain Layout
I prefare the way used in Peters book -- write a function (or equation)
 that maps an cartesian product of intervals onto the interior and other
 regions of the domain.
 I don't think this approach can describe more complicated geometries in
 3D, but is closer to the way how such a region (subsets of 
\begin_inset Formula $R^{n}$
\end_inset

) is usualy described in mathematics.
 I think it will be aslo easier to generate the computational grid if we
 have a function or equation that maps cartesian product on the domain.
\end_layout

\begin_layout Plain Layout
There are two ways for the seccond approach:
\end_layout

\begin_layout Itemize
using shape-function (used in the book)
\end_layout

\begin_layout Itemize
using equations holding coordinate transformations and define always some
 general coordinates that are bounded in cartesian product of intervals
\end_layout

\begin_layout Plain Layout
For illustration see domain_comparison.lyx/pdf file.
\end_layout

\begin_layout Plain Layout
This way of domain deffinition should be supplemented with Constructive
 Solid Geometry -- it is building more complex domains using union, intersection
 and difference of previously defined domains.
 This is not designed already.
 It should be also possible define domain in external file from some CAD
 app.
\end_layout

\begin_layout Plain Layout
4.3.1.1 
\series bold
Domain type
\series default
 similar (built-in) - In both cases all domains extends general built-in
 
\family typewriter
Domain
\family default
 type.
 Saldamlis built-in 
\family typewriter
Domain
\family default
 has different members.
 We have only 
\family typewriter
replaceable Region interior;
\end_layout

\begin_layout Plain Layout
3.2.1.2 
\series bold
Boundary type
\series default
 (built-in) -- we don't needed it.
 Here is 
\family typewriter
Region0D, Region1D, Region2D
\family default
 and 
\family typewriter
Region3D
\family default
 built-in type to describe boundaries, interior and other regions in the
 domain instead.
\end_layout

\begin_layout Plain Layout
4.3.1.3 
\series bold
Coordinate Systems 
\series default
Saldamlis domain always has cartesian coordinates defined.
 I would not insist on this.
\end_layout

\begin_layout Plain Layout
I'm not shure if we shell have a spetial data type 
\family typewriter
Coordinate
\family default
, or it should be of type 
\family typewriter
Real
\family default
 and compiler itself would infere that a variable is a coordinate that must
 be treated in a special way.
 Other option is to consider the variable type as somethink different from
 a data type because coordinate variable indeed doesn't hold any data and
 has a symbolic meaning (somethink like 
\family typewriter
time
\family default
).
 Than coordinates could be perhaps defined using keyword with lower case:
\end_layout

\begin_layout Plain Layout

\family typewriter
coordinate x;
\end_layout

\begin_layout Plain Layout
4.3.2.3 
\series bold
Vector notation 
\series default
-- coordinate-free differential operators as 
\family typewriter
gradient
\family default
, 
\family typewriter
divergence, rotation
\family default
 ...
 I didn't work up how to define this.
 Could be accepted.
\end_layout

\begin_layout Plain Layout

\series bold
4.3.3 Domain Specifier in Equations
\end_layout

\begin_layout Plain Layout
keyword 
\family typewriter
in
\family default
 accepted.
 Should be used not only for boundary conditions but also for PDE to specifie
 region and to acces field values in particular points (example above).
\end_layout

\begin_layout Plain Layout

\series bold
4.3.4 Field Reduction 
\series default
-- integral operator.
 I didn't consider yet, coul'd be perhaps undertaken.
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout

\series bold
Other notes:
\end_layout

\begin_layout Plain Layout
Equations may be written within or outside domain class.
 Outside domain coordinates must be accesd of course 
\family typewriter
domainName.coordName
\family default
.
 To make a shortcut we introduced 
\family typewriter
region
\family default
 and 
\family typewriter
domain
\family default
 (or 
\family typewriter
dom
\family default
) keywords as an alias for domain and region specified after 
\family typewriter
in 
\family default
op.
 
\end_layout

\begin_layout Plain Layout
To acces region we can write
\end_layout

\begin_layout Plain Layout

\family typewriter
pder(u,region.n) = 0 in omega.boundary;
\end_layout

\begin_layout Plain Layout
similarly for domain
\end_layout

\begin_layout Plain Layout

\family typewriter
pder(u,dom.x) in omega.interior;
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout
It shoud be possible to write equations that relates field defined in different
 domains.
 This is not designed yet.
\end_layout

\end_inset


\end_layout

\end_body
\end_document
