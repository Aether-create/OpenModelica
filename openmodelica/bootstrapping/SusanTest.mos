// name: SusanTest
// status: correct
// teardown_command: rm -f SusanTest_* Tpl_* SusanTestSmall_* SusanTestSmall.mo
// depends: SusanTestSmall.tpl
// depends: SusanTestTV.mo
// stack_size: 8192

setCommandLineOptions({"+g=MetaModelica","+d=rml,noevalfunc"});
echo(false);
prefixPath := "../../../OMCompiler/Compiler/";
echo(true);
loadFile(prefixPath + "FrontEnd/Absyn.mo");
getErrorString();
loadFile(prefixPath + "Global/Global.mo");
getErrorString();
loadFile(prefixPath + "Util/Corba.mo");
getErrorString();
loadFile(prefixPath + "Util/Debug.mo");
getErrorString();
loadFile(prefixPath + "Util/Error.mo");
getErrorString();
loadFile(prefixPath + "Util/ErrorExt.mo");
getErrorString();
loadFile(prefixPath + "Util/StringUtil.mo");
getErrorString();
loadFile(prefixPath + "Util/Flags.mo");
getErrorString();
loadFile(prefixPath + "Util/Print.mo");
getErrorString();
loadFile(prefixPath + "Util/Settings.mo");
getErrorString();
loadFile(prefixPath + "Util/System.mo");
getErrorString();
loadFile(prefixPath + "Template/TplAbsyn.mo");
getErrorString();
loadFile(prefixPath + "Template/TplCodegen.mo");
if OpenModelica.Scripting.getErrorString() == "" then "" else "Errors in TplCodegen.mo";
loadFile(prefixPath + "Template/Tpl.mo");
getErrorString();
loadFile(prefixPath + "Template/TplMain.mo");
getErrorString();
loadFile(prefixPath + "Template/TplParser.mo");
getErrorString();
loadFile(prefixPath + "Util/Util.mo");
loadFile(prefixPath + "Util/Config.mo");
loadFile(prefixPath + "Util/List.mo");
loadFile("SusanTest.mo");
getErrorString();

system("cp "+prefixPath+"Template/CodegenC.tpl "+prefixPath+"Template/CodegenUtil.tpl "+prefixPath+"Template/SimCodeTV.mo .");
system("rm -f CodegenC.mo");
SusanTest.main({"CodegenC.tpl"});
system("grep -v '$Id' "+prefixPath+"Template/CodegenC.mo > theirs");
system("grep -v '$Id' CodegenC.mo > mine");
system("diff -u theirs mine > CodegenC.diff");
readFile("CodegenC.diff");

system("rm -f SusanTestSmall.mo");
SusanTest.main({"+d=failtrace","SusanTestSmall.tpl"});
getErrorString();
loadFile("SusanTestSmall.mo");
getErrorString();
txt:=SusanTestSmall.helloWorld(Tpl.emptyTxt);
getErrorString();
Tpl.textString(txt);
getErrorString();

// Result:
// {true,true}
// true
// true
// ""
// true
// ""
// true
// ""
// true
// ""
// true
// ""
// true
// ""
// true
// ""
// true
// ""
// true
// ""
// true
// ""
// true
// ""
// true
// ""
// true
// ""
// true
// ""
// true
// ""
// true
// ""
// true
// true
// true
// true
// ""
// 0
// 0
//
// Processing file 'CodegenC.tpl'
//
// Susan parsing successful.
//
// Writing result to file 'CodegenC.mo'
//
// 0
// 0
// 0
// ""
// 0
//
// Processing file 'SusanTestSmall.tpl'
//
// Susan parsing successful.
//
// Writing result to file 'SusanTestSmall.mo'
// ### Error Buffer ###
//
//  TEXT_CREATE ident = x
//
//  BOUND_VALUE resolving boundPath = x
//
//  BOUND_VALUE resolved mmexp = l_x : Tpl.Text (dealiased: Tpl.Text)
//
//  FUN_CALL fname = helloWorld
//  FUN_CALL argList stmts generation passed
//  FUN_CALL stmt =
// txt = helloWorld(txt);
//
//  BOUND_VALUE resolving boundPath = str
//
//  BOUND_VALUE resolved mmexp = i_str : String (dealiased: String)
//
// ### End of Error Buffer ###
//
// "[NoFileName.xxx:0:0-0:0:writable] Notification: getTypeInfo failed to lookup the type 'Values.Value' after looking up all AST definitions.
// [NoFileName.xxx:0:0-0:0:writable] Notification: getTypeInfo failed to lookup the type 'DAE.Element' after looking up all AST definitions.
// "
// true
// ""
// record Tpl.Text.MEM_TEXT
//     tokens = {record Tpl.StringToken.ST_STRING
//     value = "Hello, World!"
// end Tpl.StringToken.ST_STRING;},
//     blocksStack = {}
// end Tpl.Text.MEM_TEXT;
// ""
// "Hello, World!"
// ""
// endResult
