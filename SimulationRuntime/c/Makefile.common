# Adrian Pop, adrpo@ida.liu.se, Martin Sj√∂lund, marsj@ida.liu.se
# - Use make -f Makefile.omdev.mingw if you want to compile on Windows/MinGW
# - Please leave the UNIX Makefile as it is if you are not using UNIX/Linux
# If you need to add files, etc, you modify Makefile.common - a common file
# for both UNIX/Linux and Windows platforms.

include Makefile.objs

CPPFLAGS = -I. -I$(UTILPATH) -I. -I$(METAPATH) -I$(METAPATH)gc $(LIBF2CINC) -I$(top_builddir)/3rdParty/gc-7.2/include -I$(top_builddir)/3rdParty/FMIL/install/include/ -I$(top_builddir)/3rdParty/lis-1.4.12/include/ -I$(top_builddir)/3rdParty/Ipopt-3.11.6/include/ $(CONFIG_CPPFLAGS) -DGC_REDIRECT_TO_LOCAL
CFLAGS = $(CPPFLAGS) $(CONFIG_CFLAGS) $(EXTRA_CFLAGS)
CXXFLAGS = $(CFLAGS)
FFLAGS  = -O -fexceptions
# P.A: before, g77 had -O3 or -O2 but that caused a bug in DDASRT, giving infinite loop.
builddir = ../../build

RUNTIME_HEADERS = $(LIBF2CHEADER) \
./omc_inline.h \
./math-support/blaswrap.h \
./openmodelica_func.h \
./openmodelica.h \
./openmodelica_types.h \
./simulation_data.h \
./ModelicaUtilities.h

RUNTIMELINEAR_HEADERS = ./linearization/linearize.h 

RUNTIMEOPTIMZ_HEADERS = ./optimization/interfaceOptimization.h ./optimization/ipoptODEstruct.h ./optimization/localFunction.h

RUNTIMESIMULATION_HEADERS = ./simulation/modelinfo.h \
./simulation/options.h \
./simulation/simulation_info_xml.h \
./simulation/simulation_input_xml.h \
./simulation/simulation_runtime.h 

RUNTIMESIMRESULTS_HEADERS = ./simulation/results/simulation_result.h  

RUNTIMESIMSOLVER_HEADERS = ./simulation/solver/delay.h \
./simulation/solver/mixedSystem.h \
./simulation/solver/linearSystem.h \
./simulation/solver/model_help.h \
./simulation/solver/nonlinearSystem.h \
./simulation/solver/simulation_inline_solver.h \
./simulation/solver/stateset.h \
./simulation/solver/perform_simulation.c \
./simulation/solver/dassl.h \
./simulation/solver/events.h \
./simulation/solver/external_input.h\
./simulation/solver/solver_main.h 

RUNTIMEMETA_HEADERS = ./meta/meta_modelica_builtin_boxptr.h \
./meta/meta_modelica_builtin.h \
./meta/meta_modelica.h \
./meta/meta_modelica_mk_box.h \
./meta/meta_modelica_segv.h \
./meta/meta_modelica_string_lit.h 

RUNTIMEMETAGC_HEADERS = ./meta/gc/mmc_gc.h 

RUNTIMEUTIL_HEADERS = \
./util/base_array.h \
./util/boolean_array.h \
./util/division.h \
./util/generic_array.h \
./util/index_spec.h \
./util/integer_array.h \
./util/java_interface.h \
./util/memory_pool.h \
./util/modelica.h \
./util/modelica_string.h \
./util/omc_error.h \
./util/omc_msvc.h \
./util/omc_spinlock.h \
./util/read_write.h \
./util/real_array.h \
./util/ringbuffer.h \
./util/rtclock.h \
./util/simulation_options.h \
./util/string_array.h \
./util/utility.h \
./util/varinfo.h \
./util/list.h 

RUNTIMEINITIALIZATION_HEADERS = \
./simulation/solver/initialization/initialization.h \
./simulation/solver/initialization/initialization_data.h 

# RUNTIME_HEADERS_FMU = \
# ./simulation/solver/initialization/initialization.h \
# ./simulation/solver/initialization/initialization_data.h \
# ./simulation/solver/events.h \
# ./simulation/solver/solver_main.h \
# ./util/list.h \

.PHONY : clean all $(LIBF2C) emcc emcc-clean emcc/libSimulationRuntimeC.so emcc/libf2c.so

all : install

all_objs : $(ALL_OBJS)

#recompile all if a header changes!
$(ALL_OBJS) : $(ALL_HEADERS)

libSimulationRuntimeC.a: $(ALL_OBJS)
	@# You have to remove the old archive first or it may contain old objects
	@rm -f $@
	$(AR) $@ $(ALL_OBJS)

	ranlib $@

libSimulationRuntimeC.so: $(ALL_OBJS) $(builddir_lib)/libf2c.a
	@rm -f $@
	$(CC) -shared -o $@ $(ALL_OBJS) $(LDFLAGS_SIM)

libSimulationRuntimeC.dylib: $(ALL_OBJS) $(builddir_lib)/libf2c.a
	@rm -f $@
	$(CC) -shared -o $@ $(ALL_OBJS) $(LDFLAGS_SIM) -undefined dynamic_lookup -install_name '@rpath/$@'

libSimulationRuntimeC.bc: $(ALL_OBJS)
	@rm -f $@
	$(CC) -o $@ $(ALL_OBJS)

libOpenModelicaRuntimeC.a: $(BASE_OBJS)
	@# You have to remove the old archive first or it may contain old objects
	@rm -f $@
	$(AR) $@ $(BASE_OBJS)
	ranlib $@

libOpenModelicaRuntimeC.so: $(BASE_OBJS)
	@rm -f $@
	$(CC) -shared -o $@ $(BASE_OBJS) $(LDFLAGS)

libOpenModelicaRuntimeC.dylib: $(BASE_OBJS)
	@rm -f $@
	$(CC) -shared -o $@ $(BASE_OBJS) $(LDFLAGS) -undefined dynamic_lookup -install_name '@rpath/$@'

libOpenModelicaFMIRuntimeC.a: $(FMIOBJSPATH)
	@rm -f $@
	$(AR) $@ $(FMILIB) $(FMIOBJSPATH)
	ranlib $@

libOpenModelicaFMIRuntimeC.so: $(FMIOBJSPATH) $(builddir_lib)/libf2c.a
	@rm -f $@
	$(CC) -shared -o $@ $(FMIOBJSPATH) $(LDFLAGS)

libOpenModelicaFMIRuntimeC.dylib: $(FMIOBJSPATH) $(builddir_lib)/libf2c.a
	@rm -f $@
	$(CC) -shared -o $@ $(FMIOBJSPATH) $(LDFLAGS_SIM) -undefined dynamic_lookup -install_name '@rpath/$@'

$(METAOBJSPATH):%$(OBJ_EXT): %.c $(METAHFILESPATH) $(COMMON_HEADERS)
	$(CC) -c  -I$(METAPATH) -I$(UTILPATH) $(CFLAGS) -o $@ $<

meta/meta_modelica_catch$(OBJ_EXT): meta/meta_modelica_catch.c
	$(CC) -c $(CFLAGS) -o $@ $< -g

$(UTILOBJSPATH):%$(OBJ_EXT): %.c $(UTILHFILESPATH) $(COMMON_HEADERS)
	$(CC) -c -I$(UTILPATH) -I$(METAPATH) $(CFLAGS) -o $@ $<

$(MATHOBJSPATH):%$(OBJ_EXT): %.c $(MATHHFILESPATH) $(COMMON_HEADERS)
	$(CC) -c -I$(MATHPATH) -I$(UTILPATH) $(CFLAGS) $(FPMATHFORTRAN) -o $@ $<

$(SOLVEROBJSPATH):%$(OBJ_EXT): %.c $(SOLVERHFILESPATH) $(RESULTSHFILESPATH) $(INITIALIZATIONHFILESPATH) $(OPTIMIZATIONHFILESPATH) $(COMMON_HEADERS)
	$(CC) -c -I$(SOLVERPATH) -I$(INITIALIZATIONPATH) -I$(OPTIMIZATIONPATH) -I$(RESULTSPATH) -I$(SIMPATH) -I$(MATHPATH) -I$(UTILPATH) $(CFLAGS) -o $@ $<

$(INITIALIZATIONOBJSPATH):%$(OBJ_EXT): %.c $(SOLVERHFILESPATH) $(INITIALIZATIONHFILESPATH) $(COMMON_HEADERS)
	$(CC) -c -I$(SOLVERPATH) -I$(INITIALIZATIONPATH) -I$(SIMPATH) -I$(MATHPATH) -I$(UTILPATH) $(CFLAGS) -o $@ $<

$(RESULTSOBJSPATH):%$(OBJ_EXT): %.cpp $(RESULTSFILESPATH) $(COMMON_HEADERS)
	$(CC) -c $(CFLAGS) -o $@ $<

$(SIMOBJSPATH):%$(OBJ_EXT): %.cpp linearization/linearize.cpp $(SIMHFILESPATH) $(COMMON_HEADERS)
	$(CXX) -c -I$(SIMPATH) -I$(UTILPATH) -I$(MATHPATH) -I$(RESULTSPATH) -I$(SOLVERPATH) -I$(INITIALIZATIONPATH) -Ilinearization/ $(CXXFLAGS) -o $@ $<

$(SIMOBJSPATHC):%$(OBJ_EXT): %.c $(SIMHFILESPATH) $(COMMON_HEADERS)
	@echo Deps: $(SIMHFILESPATH) $(COMMON_HEADERS)
	$(CC) -c -I$(SIMPATH) -I$(UTILPATH) -I$(MATHPATH) -I$(RESULTSPATH) -I$(SOLVERPATH) -I$(INITIALIZATIONPATH) -Ilinearization/ $(CFLAGS) -o $@ $<

$(OPTIMIZATIONOBJSPATH):%$(OBJ_EXT): %.c $(OPTIMIZATIONHFILESPATH) $(COMMON_HEADERS)
	$(CC) -c $(CFLAGS) -o $@ $<

simulation/libf2c/libf2c.a:
	$(MAKE) -C simulation/libf2c -f ${LIBMAKEFILE}

$(builddir_lib)/libf2c.a: simulation/libf2c/libf2c.a
	cp $< $@

install: $(LIBSIMULATION) $(LIBRUNTIME) $(LIBFMIRUNTIME) simulation/libf2c/libf2c.a $(ALL_OBJS) $(builddir_lib)/libf2c.a
	# copy libraries
	cp -p $(LIBSIMULATION) $(LIBRUNTIME) $(LIBFMIRUNTIME) \
	   ../interactive/libinteractive.a $(builddir_lib)
	test ! -f libSimulationRuntimeC.bc || cp libSimulationRuntimeC.bc $(builddir_lib)/emcc/libSimulationRuntimeC.so
	test ! -f simulation/libf2c/libf2c.bc || cp simulation/libf2c/libf2c.bc $(builddir_lib)/emcc/libf2c.so
	# copy interactive sample client
	cp $(INTERACTIVECLIENT) $(builddir_bin)
	# copy header files
	cp -p $(RUNTIME_HEADERS) $(builddir_inc)/c/
	cp -p $(RUNTIMELINEAR_HEADERS) $(builddir_inc)/c/linearization/
	cp -p $(RUNTIMEOPTIMZ_HEADERS) $(builddir_inc)/c/optimization/
	cp -p $(RUNTIMESIMULATION_HEADERS) $(builddir_inc)/c/simulation/
	cp -p $(RUNTIMESIMRESULTS_HEADERS) $(builddir_inc)/c/simulation/results/
	cp -p $(RUNTIMESIMSOLVER_HEADERS) $(builddir_inc)/c/simulation/solver/
	cp -p $(RUNTIMEINITIALIZATION_HEADERS) $(builddir_inc)/c/simulation/solver/initialization/
	cp -p $(RUNTIMEMETA_HEADERS) $(builddir_inc)/c/meta/
	cp -p $(RUNTIMEMETAGC_HEADERS) $(builddir_inc)/c/meta/gc/
	cp -p $(RUNTIMEUTIL_HEADERS) $(builddir_inc)/c/util/
	# copy fmi stuff
	cp -p $(RUNTIME_HEADERS_FMU) ../fmi/export/*.h \
	   ../fmi/export/fmu_model_interface.c \
	   ../fmi/import/fmuWrapper.h \
	   ../fmi/import/xmlparser.h $(builddir_inc)/c
	# copy java interface stuff
	@$(MAKE) -C util/java_interface -f $(LIBMAKEFILE) && \
	$(MAKE) -C util/java_interface -f $(LIBMAKEFILE) install || \
	$(MAKE) -C util/java_interface -f $(LIBMAKEFILE) install-nomodelica

clean:
	rm -f $(ALL_PATHS_CLEAN_OBJS) fmi/*.o *.a optimization/*/*.o
	$(MAKE) -C simulation/libf2c -f ${LIBMAKEFILE} clean
	(! test -f $(EXTERNALCBUILDDIR)/Makefile) || make -C $(EXTERNALCBUILDDIR) clean
	(! test -f $(EXTERNALCBUILDDIR)/Makefile) || make -C $(EXTERNALCBUILDDIR) distclean
