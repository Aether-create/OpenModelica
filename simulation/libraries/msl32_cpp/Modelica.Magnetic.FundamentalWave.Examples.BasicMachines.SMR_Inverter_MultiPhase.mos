// name:     Modelica.Magnetic.FundamentalWave.Examples.BasicMachines.SMR_Inverter_MultiPhase
// keywords: simulation MSL Examples
// status: correct
//
// Simulation Results
// Modelica Standard Library
//

runScript("../common/ModelTestingDefaults.mos"); getErrorString();

modelTestingType := OpenModelicaModelTesting.Kind.SimpleSimulation;
modelName := $TypeName(Modelica.Magnetic.FundamentalWave.Examples.BasicMachines.SMR_Inverter_MultiPhase);
compareVars :=
{
   "loadInertia3.phi",
   "loadInertia3.w",
   "loadInertiaM.phi",
   "loadInertiaM.w",
   "smr3.stator.electroMagneticConverter.singlePhaseElectroMagneticConverter[1].Phi.re",
   "smr3.stator.electroMagneticConverter.singlePhaseElectroMagneticConverter[2].Phi.im",
   "smr3.stator.strayReluctance.port_p.Phi.im",
   "smr3.stator.strayReluctance.port_p.Phi.re",
   "smrM.stator.electroMagneticConverter.singlePhaseElectroMagneticConverter[1].Phi.re",
   "smrM.stator.electroMagneticConverter.singlePhaseElectroMagneticConverter[2].Phi.im",
   "smrM.stator.strayReluctance.port_p.Phi.im",
   "smrM.stator.strayReluctance.port_p.Phi.re",
   "vfController3.x",
   "vfControllerM.x"
};

simulationRuntime := OpenModelicaModelTesting.SimulationRuntime.Cpp;

runScript(modelTesting);getErrorString();

// Result:
// "true
// "
// ""
// OpenModelicaModelTesting.Kind.SimpleSimulation
// Modelica.Magnetic.FundamentalWave.Examples.BasicMachines.SMR_Inverter_MultiPhase
// {"loadInertia3.phi","loadInertia3.w","loadInertiaM.phi","loadInertiaM.w","smr3.stator.electroMagneticConverter.singlePhaseElectroMagneticConverter[1].Phi.re","smr3.stator.electroMagneticConverter.singlePhaseElectroMagneticConverter[2].Phi.im","smr3.stator.strayReluctance.port_p.Phi.im","smr3.stator.strayReluctance.port_p.Phi.re","smrM.stator.electroMagneticConverter.singlePhaseElectroMagneticConverter[1].Phi.re","smrM.stator.electroMagneticConverter.singlePhaseElectroMagneticConverter[2].Phi.im","smrM.stator.strayReluctance.port_p.Phi.im","smrM.stator.strayReluctance.port_p.Phi.re","vfController3.x","vfControllerM.x"}
// OpenModelicaModelTesting.SimulationRuntime.Cpp
// Simulation options: startTime = 0.0, stopTime = 1.5, numberOfIntervals = 1500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'Modelica.Magnetic.FundamentalWave.Examples.BasicMachines.SMR_Inverter_MultiPhase', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''
// Result file: Modelica.Magnetic.FundamentalWave.Examples.BasicMachines.SMR_Inverter_MultiPhase_res.mat
// Messages: 
// [CVODES WARNING]  CVode
//   Internal t = 1.25931 and h = 2.32081e-020 are such that t + h = t on the next step. The solver will continue anyway.
// 
// 
// [CVODES WARNING]  CVode
//   Internal t = 1.25931 and h = 2.32081e-020 are such that t + h = t on the next step. The solver will continue anyway.
// 
// 
// [CVODES WARNING]  CVode
//   Internal t = 1.37965 and h = 1.52981e-020 are such that t + h = t on the next step. The solver will continue anyway.
// 
// 
// [CVODES WARNING]  CVode
//   Internal t = 1.37965 and h = 1.52981e-020 are such that t + h = t on the next step. The solver will continue anyway.
// 
// 
// [CVODES WARNING]  CVode
//   Internal t = 1.38804 and h = 1.11005e-020 are such that t + h = t on the next step. The solver will continue anyway.
// 
// 
// [CVODES WARNING]  CVode
//   Internal t = 1.38804 and h = 1.11005e-020 are such that t + h = t on the next step. The solver will continue anyway.
// 
// 
// [CVODES WARNING]  CVode
//   Internal t = 1.38804 and h = 2.23733e-020 are such that t + h = t on the next step. The solver will continue anyway.
// 
// 
// [CVODES WARNING]  CVode
//   Internal t = 1.38804 and h = 2.23733e-020 are such that t + h = t on the next step. The solver will continue anyway.
// 
// 
// [CVODES WARNING]  CVode
//   Internal t = 1.38804 and h = 2.23733e-020 are such that t + h = t on the next step. The solver will continue anyway.
// 
// 
// [CVODES WARNING]  CVode
//   Internal t = 1.38804 and h = 2.23733e-020 are such that t + h = t on the next step. The solver will continue anyway.
// 
// 
// [CVODES WARNING]  CVode
//   The above warning has been issued mxhnil times and will not be issued again for this problem.
// 
// 
// Warning: The initial conditions are not fully specified. Use +d=initialization for more information.
// 
// "true
// "
// ""
// endResult
