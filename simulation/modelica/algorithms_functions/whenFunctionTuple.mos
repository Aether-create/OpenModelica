// name:     whenDiscreteFunctionTuple
// keywords: when discrete algorithm function tuple
// status: correct
// teardown_command: rm -rf  testWhenAlgFuncTuple* output.log
// 
// 

loadString("
function f1
  input Real x;
  input Integer n;
  output Real y[n];
algorithm
  for i in 1:n loop
    y[i] := sin(x)+1;
  end for;
end f1;

function f2
  input Real x;
  input Integer n;
  output Real y[n];
  output Integer done;
algorithm
  for i in 1:n loop
    y[i] := sin(x)+1;
  end for;
  done:= n;
end f2;

model testWhenAlgFuncTuple
  parameter Real step = 0.1;
  parameter Integer nOutputs = 2;
  Real outputs1[nOutputs];
  Real outputs2[nOutputs];
  Integer done;
algorithm
  when sample(0, step) then
    outputs1 := f1(step, nOutputs);
    (outputs2,done) := f2(step, nOutputs);  
  end when;
end testWhenAlgFuncTuple;
");

simulate(testWhenAlgFuncTuple);

val(outputs1[1],0.0);
val(outputs1[2],0.0);
val(outputs1[1],1.0);
val(outputs1[2],1.0);
val(outputs2[1],0.0);
val(outputs2[2],0.0);
val(outputs2[1],1.0);
val(outputs2[2],1.0);
// Result:
// true
// record SimulationResult
//     resultFile = "testWhenAlgFuncTuple_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 0.000001, method = 'dassl', fileNamePrefix = 'testWhenAlgFuncTuple', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = ""
// end SimulationResult;
// 1.0998334166468282
// 1.0998334166468282
// 1.0998334166468282
// 1.0998334166468282
// 1.0998334166468282
// 1.0998334166468282
// 1.0998334166468282
// 1.0998334166468282
// endResult
