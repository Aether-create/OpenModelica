# Adrian Pop, adrpo@ida.liu.se, Martin Sj√∂lund, marsj@ida.liu.se
# - Use make -f Makefile.omdev.mingw if you want to compile on Windows/MinGW
# - Please leave the UNIX Makefile as it is if you are not using UNIX/Linux
# If you need to add files, etc, you modify Makefile.common - a common file
# for both UNIX/Linux and Windows platforms.

include Makefile.objs

CPPFLAGS = -I. -I$(UTILPATH) -I. -I$(METAPATH) -I$(METAPATH)gc
CFLAGS = $(CPPFLAGS) $(CONFIG_CFLAGS) -Wall -pedantic $(EXTRA_CFLAGS)
CXXFLAGS = $(CFLAGS)
FFLAGS  = -O -fexceptions
# P.A: before, g77 had -O3 or -O2 but that caused a bug in DDASRT, giving infinite loop.

RUNTIME_HEADERS = ./f2c.h \
./omc_inline.h \
./math-support/blaswrap.h \
./math-support/matrix.h \
./math-support/nonlinearSystem.h \
./meta/gc/common.h \
./meta/gc/gc.h \
./meta/gc/generational.h \
./meta/gc/marksweep.h \
./meta/gc/roots.h \
./meta/meta_modelica_builtin_boxptr.h \
./meta/meta_modelica_builtin.h \
./meta/meta_modelica.h \
./meta/meta_modelica_real.h \
./meta/meta_modelica_string_lit.h \
./ModelicaExternalC/ModelicaUtilities.h \
./openmodelica_func.h \
./openmodelica.h \
./simulation_data.h \
./simulation/simulation_runtime.h \
./simulation/solver/delay.h \
./simulation/solver/model_help.h \
./simulation/solver/simulation_inline_solver.h \
./simulation/results/simulation_result.h \
./util/base_array.h \
./util/boolean_array.h \
./util/division.h \
./util/index_spec.h \
./util/integer_array.h \
./util/java_interface.h \
./util/memory_pool.h \
./util/modelica.h \
./util/modelica_string.h \
./util/modelinfo.h \
./util/omc_error.h \
./util/read_write.h \
./util/real_array.h \
./util/ringbuffer.h \
./util/rtclock.h \
./util/string_array.h \
./util/utility.h \
./util/varinfo.h \
./linearization/linearize.h 

RUNTIME_HEADERS_FMU = \
./simulation/solver/initialization/initialization.h \
./simulation/solver/initialization/initialization_data.h \
./simulation/solver/events.h \
./simulation/solver/solver_main.h \
./util/list.h \

.PHONY : clean all ModelicaExternalC/libModelicaExternalC.a $(LIBF2C)

all : install 


#recompile all if a header changes!
$(ALL_OBJS) : $(ALL_HEADERS)

libSimulationRuntimeC.a: $(ALL_OBJS)
	@# You have to remove the old archive first or it may contain old objects
	@rm -f $@
	$(AR) $@ $(ALL_OBJS)
	ranlib $@

libOpenModelicaRuntimeC.a: $(BASE_OBJS)
	@# You have to remove the old archive first or it may contain old objects
	@rm -f $@
	$(AR) $@ $(BASE_OBJS)
	ranlib $@

$(METAOBJSPATH):%.o: %.c $(METAHFILESPATH) $(COMMON_HEADERS)
	$(CC) -c $(CFLAGS) -o $@ $< -I$(METAPATH) -I$(UTILPATH)

meta/meta_modelica_catch.o: meta/meta_modelica_catch.c
	$(CC) -c $(CFLAGS) -o $@ $< -g

$(UTILOBJSPATH):%.o: %.c $(UTILHFILESPATH) $(COMMON_HEADERS)
	$(CC) -c $(CFLAGS) -o $@ $< -I$(UTILPATH) -I$(METAPATH)

$(MATHOBJSPATH):%.o: %.c $(MATHHFILESPATH) $(COMMON_HEADERS)
	$(CC) -c $(CFLAGS) -o $@ $< -I$(MATHPATH) -I$(UTILPATH)

$(SOLVEROBJSPATH):%.o: %.c $(SOLVERHFILESPATH) $(INITIALIZATIONHFILESPATH) $(COMMON_HEADERS)
	$(CC) -c $(CFLAGS) $(FPMATHFORTRAN) -o $@ $< -I$(SOLVERPATH) -I$(INITIALIZATIONPATH) -I$(SIMPATH) -I$(MATHPATH) -I$(UTILPATH)

$(INITIALIZATIONOBJSPATH):%.o: %.c $(SOLVERHFILESPATH) $(INITIALIZATIONHFILESPATH) $(COMMON_HEADERS)
	$(CC) -c $(CFLAGS) -o $@ $< -I$(SOLVERPATH) -I$(INITIALIZATIONPATH) -I$(SIMPATH) -I$(MATHPATH) -I$(UTILPATH)

$(RESULTSOBJSPATH):%.o: $(RESULTSFILESPATH) $(COMMON_HEADERS)

$(SIMOBJSPATH):%.o: %.cpp linearization/linearize.cpp $(SIMHFILESPATH) $(COMMON_HEADERS)
	$(CXX) -c $(CXXFLAGS) -o $@ $< -I$(SIMPATH) -I$(UTILPATH) -I$(MATHPATH) -I$(RESULTSPATH) -I$(SOLVERPATH) -I$(INITIALIZATIONPATH) -Ilinearization/

ModelicaExternalC/libModelicaExternalC.a: $(addprefix ModelicaExternalC/,ModelicaInternal.c ModelicaStrings.c ModelicaTablesImpl.c) $(HFILES)
	$(MAKE) -C ModelicaExternalC -f $(EXTERNALCMAKEFILE)

simulation/libf2c/libf2c.a: 
	$(MAKE) -C simulation/libf2c -f ${LIBMAKEFILE}

install: ModelicaExternalC/libModelicaExternalC.a libSimulationRuntimeC.a libOpenModelicaRuntimeC.a simulation/libf2c/libf2c.a $(ALL_OBJS)
	# copy libraries
	cp -p ./libSimulationRuntimeC.a libOpenModelicaRuntimeC.a \
	   ./ModelicaExternalC/libModelicaExternalC.a \
	   ../interactive/libinteractive.a $(builddir_lib)
	test -z "$(LIBF2C)" || cp simulation/libf2c/libf2c.* $(builddir_lib)/
	# copy header files
	cp -p $(RUNTIME_HEADERS) $(builddir_inc)
	# copy fmi stuff
	cp -p $(RUNTIME_HEADERS_FMU) ../fmi/export/*.h \
	   ../fmi/export/fmu_model_interface.c \
	   ../fmi/import/fmuWrapper.h \
	   ../fmi/import/xmlparser.h $(builddir_inc)
	# copy java interface stuff
	@$(MAKE) -C util/java_interface -f $(LIBMAKEFILE) && \
	$(MAKE) -C util/java_interface -f $(LIBMAKEFILE) install || \
	$(MAKE) -C util/java_interface -f $(LIBMAKEFILE) install-nomodelica	

clean:
	rm -f $(ALL_PATHS_CLEAN_OBJS) *.a
	$(MAKE) -C ModelicaExternalC -f ${LIBMAKEFILE} clean
	$(MAKE) -C simulation/libf2c -f ${LIBMAKEFILE} clean
	
