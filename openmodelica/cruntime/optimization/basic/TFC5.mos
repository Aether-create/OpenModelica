// name: testFinalCon_5
// status: correct

setCommandLineOptions("+gDynopt");
getErrorString();

loadString("
model testFinalCon5
  Real x1;
  Real x2;
  Real y1;
  Real y2;
  Real y3(start = -1);
  input Real u;

  Real final_con1(min = 0, max = 0) annotation(isFinalConstraint = true);
  Real final_con2(min = 0, max = 0) annotation(isFinalConstraint = true);
  Real cost annotation(isLagrange = true);

equation
  der(x1) = x2*u - x1;
  der(x2) = x1 + y1;
  final_con1 = x1 - 2; //0 <= x1 - 2 <= 0 for t = tf
  final_con2 = x2 - 3;
   0 = 3*y1 + y2 - exp(1 + u);
   0 = y1 - 5*y2 - exp(1 + time);
   y3^2 = 1 + time;
  cost = u^2;
end testFinalCon5;

model testFinalCon5_
  extends testFinalCon5;
end testFinalCon5_;

");
getErrorString();

setCommandLineOptions("+maxSizeSolveLinearSystem=0");
getErrorString();
echo(false);
res:=optimize(testFinalCon5_, numberOfIntervals=20, tolerance = 1e-08, stopTime = 5, simflags="-optimizerNP 1");
messages:=res.messages;
echo(true);
res.resultFile;
if regexBool(messages, "No optimal solution found") then
  print("No optimal solution found");
else
  print("Optimal solution found? Weird...\n");
  exit(1);
end if;
getErrorString();

res := OpenModelica.Scripting.compareSimulationResults("testFinalCon5__res.mat","ReferenceFiles/testFinalCon5_ref.mat","testFinalCon_diff.csv",0.01,0.0001); // Files not equal!!! Testing other convergence with solveLinearSystem
getErrorString();

setCommandLineOptions("+maxSizeSolveLinearSystem=20"); getErrorString();
optimize(testFinalCon5, numberOfIntervals=700, tolerance = 1e-08, stopTime = 5, simflags=/*-lv LOG_IPOPT_ERROR gives different results depending on */ "-optimizerNP 1");
getErrorString();

res := OpenModelica.Scripting.compareSimulationResults("testFinalCon5_res.mat","ReferenceFiles/testFinalCon5_ref.mat","testFinalCon_diff.csv",0.01,0.0001);
getErrorString();

// Result:
// true
// ""
// true
// ""
// true
// ""
// true
// "testFinalCon5__res.mat"
// No optimal solution found
// "Warning: The initial conditions are not fully specified. Use +d=initialization for more information.
// "
// {"Files not Equal!","y2","y1","x2","x1","u","final_con2","final_con1","der(x2)","der(x1)","cost"}
// "Warning: Files not Equal
// "
// true
// ""
// record SimulationResult
//     resultFile = "testFinalCon5_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 5.0, numberOfIntervals = 700, tolerance = 1e-08, method = 'optimization', fileNamePrefix = 'testFinalCon5', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = '-optimizerNP 1'",
//     messages = "
// Optimizer Variables
// ========================================================
// State[0]:x1(start = 0, nominal = 1, min = -Inf, max = +Inf, init = 0)
// State[1]:x2(start = 0, nominal = 1, min = -Inf, max = +Inf, init = 0)
// Input[2]:u(start = 0, nominal = 1, min = -Inf, max = +Inf)
// --------------------------------------------------------
// number of nonlinear constraints: 0
// ========================================================
//
// ******************************************************************************
// This program contains Ipopt, a library for large-scale nonlinear optimization.
//  Ipopt is released as open source code under the Eclipse Public License (EPL).
//          For more information visit http://projects.coin-or.org/Ipopt
// ******************************************************************************
//
// "
// end SimulationResult;
// "Warning: The initial conditions are not fully specified. Use +d=initialization for more information.
// "
// {"Files Equal!"}
// ""
// endResult
