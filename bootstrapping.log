make[1]: Verzeichnis »/home/marcus/workspace/openmodelica/openmodelica/OpenModelica-testsuite/openmodelica/bootstrapping« wird betreten

Running tests...

OPENMODELICAHOME= /home/marcus/workspace/openmodelica/openmodelica/OMCompiler/build 
 + DumpTest                                                                          ... execution failed

==== Log /tmp/omc-rtest-marcus/openmodelica/bootstrapping/log-DumpTest.mos
"
"
""
true
""
true
true
"DumpGraphviz.dump"
graph AST {
GVNOD0[label="ROOT"];GVNOD1[label="PURE FUNCTION"];GVNOD1 -- GVNOD0;
}
 + SimplifyOperator                                                                  ... execution failed

==== Log /tmp/omc-rtest-marcus/openmodelica/bootstrapping/log-ExpressionTest.mos
 + GraphTest                                                                         ... execution failed

==== Log /tmp/omc-rtest-marcus/openmodelica/bootstrapping/log-GraphTest.mos
 + HashTable Unit Testing                                                            ... ok [time:14]
 + PriorityQueue                                                                     ... execution failed

==== Log /tmp/omc-rtest-marcus/openmodelica/bootstrapping/log-PriorityQueue.mos
"
"
""
true
""
{}
""
{record PriorityQueue.Tree.NODE
    elt = (1,{}),
    rank = 0,
    trees = {}
end PriorityQueue.Tree.NODE;}
""
(1,{})
""
{record PriorityQueue.Tree.NODE
    elt = (1,{}),
    rank = 1,
    trees = {record PriorityQueue.Tree.NODE
    elt = (3,{}),
    rank = 0,
    trees = {}
end PriorityQueue.Tree.NODE;}
end PriorityQueue.Tree.NODE;}
""
(1,{})
""
{record PriorityQueue.Tree.NODE
    elt = (2,{}),
    rank = 0,
    trees = {}
end PriorityQueue.Tree.NODE;,record PriorityQueue.Tree.NODE
    elt = (1,{}),
    rank = 1,
    trees = {record PriorityQueue.Tree.NODE
    elt = (3,{}),
    rank = 0,
    trees = {}
end PriorityQueue.Tree.NODE;}
end PriorityQueue.Tree.NODE;}
""
(1,{})
""
{record PriorityQueue.Tree.NODE
    elt = (1,{}),
    rank = 2,
    trees = {record PriorityQueue.Tree.NODE
    elt = (2,{}),
    rank = 1,
    trees = {record PriorityQueue.Tree.NODE
    elt = (4,{}),
    rank = 0,
    trees = {}
end PriorityQueue.Tree.NODE;}
end PriorityQueue.Tree.NODE;,record PriorityQueue.Tree.NODE
    elt = (3,{}),
    rank = 0,
    trees = {}
end PriorityQueue.Tree.NODE;}
end PriorityQueue.Tree.NODE;}
""
(1,{})
""
{record PriorityQueue.Tree.NODE
    elt = (7,{}),
    rank = 0,
    trees = {}
end PriorityQueue.Tree.NODE;,record PriorityQueue.Tree.NODE
    elt = (1,{}),
    rank = 2,
    trees = {record PriorityQueue.Tree.NODE
    elt = (2,{}),
    rank = 1,
    trees = {record PriorityQueue.Tree.NODE
    elt = (4,{}),
    rank = 0,
    trees = {}
end PriorityQueue.Tree.NODE;}
end PriorityQueue.Tree.NODE;,record PriorityQueue.Tree.NODE
    elt = (3,{}),
    rank = 0,
    trees = {}
end PriorityQueue.Tree.NODE;}
end PriorityQueue.Tree.NODE;}
""
(1,{})
""
{record PriorityQueue.Tree.NODE
    elt = (-2,{}),
    rank = 1,
    trees = {record PriorityQueue.Tree.NODE
    elt = (7,{}),
    rank = 0,
    trees = {}
end PriorityQueue.Tree.NODE;}
end PriorityQueue.Tree.NODE;,record PriorityQueue.Tree.NODE
    elt = (1,{}),
    rank = 2,
    trees = {record PriorityQueue.Tree.NODE
    elt = (2,{}),
    rank = 1,
    trees = {record PriorityQueue.Tree.NODE
    elt = (4,{}),
    rank = 0,
    trees = {}
end PriorityQueue.Tree.NODE;}
end PriorityQueue.Tree.NODE;,record PriorityQueue.Tree.NODE
    elt = (3,{}),
    rank = 0,
    trees = {}
end PriorityQueue.Tree.NODE;}
end PriorityQueue.Tree.NODE;}
""
(-2,{})
""
{record PriorityQueue.Tree.NODE
    elt = (11,{}),
    rank = 0,
    trees = {}
end PriorityQueue.Tree.NODE;,record PriorityQueue.Tree.NODE
    elt = (-2,{}),
    rank = 1,
    trees = {record PriorityQueue.Tree.NODE
    elt = (7,{}),
    rank = 0,
    trees = {}
end PriorityQueue.Tree.NODE;}
end PriorityQueue.Tree.NODE;,record PriorityQueue.Tree.NODE
    elt = (1,{}),
    rank = 2,
    trees = {record PriorityQueue.Tree.NODE
    elt = (2,{}),
    rank = 1,
    trees = {record PriorityQueue.Tree.NODE
    elt = (4,{}),
    rank = 0,
    trees = {}
end PriorityQueue.Tree.NODE;}
end PriorityQueue.Tree.NODE;,record PriorityQueue.Tree.NODE
    elt = (3,{}),
    rank = 0,
    trees = {}
end PriorityQueue.Tree.NODE;}
end PriorityQueue.Tree.NODE;}
""
(-2,{})
""
{record PriorityQueue.Tree.NODE
    elt = (-2,{}),
    rank = 3,
    trees = {record PriorityQueue.Tree.NODE
    elt = (1,{}),
    rank = 2,
    trees = {record PriorityQueue.Tree.NODE
    elt = (2,{}),
    rank = 1,
    trees = {record PriorityQueue.Tree.NODE
    elt = (4,{}),
    rank = 0,
    trees = {}
end PriorityQueue.Tree.NODE;}
end PriorityQueue.Tree.NODE;,record PriorityQueue.Tree.NODE
    elt = (3,{}),
    rank = 0,
    trees = {}
end PriorityQueue.Tree.NODE;}
end PriorityQueue.Tree.NODE;,record PriorityQueue.Tree.NODE
    elt = (11,{}),
    rank = 1,
    trees = {record PriorityQueue.Tree.NODE
    elt = (35,{}),
    rank = 0,
    trees = {}
end PriorityQueue.Tree.NODE;}
end PriorityQueue.Tree.NODE;,record PriorityQueue.Tree.NODE
    elt = (7,{}),
    rank = 0,
    trees = {}
end PriorityQueue.Tree.NODE;}
end PriorityQueue.Tree.NODE;}
""
(-2,{})
""
{record PriorityQueue.Tree.NODE
    elt = (26,{}),
    rank = 0,
    trees = {}
end PriorityQueue.Tree.NODE;,record PriorityQueue.Tree.NODE
    elt = (-2,{}),
    rank = 3,
    trees = {record PriorityQueue.Tree.NODE
    elt = (1,{}),
    rank = 2,
    trees = {record PriorityQueue.Tree.NODE
    elt = (2,{}),
    rank = 1,
    trees = {record PriorityQueue.Tree.NODE
    elt = (4,{}),
    rank = 0,
    trees = {}
end PriorityQueue.Tree.NODE;}
end PriorityQueue.Tree.NODE;,record PriorityQueue.Tree.NODE
    elt = (3,{}),
    rank = 0,
    trees = {}
end PriorityQueue.Tree.NODE;}
end PriorityQueue.Tree.NODE;,record PriorityQueue.Tree.NODE
    elt = (11,{}),
    rank = 1,
    trees = {record PriorityQueue.Tree.NODE
    elt = (35,{}),
    rank = 0,
    trees = {}
end PriorityQueue.Tree.NODE;}
end PriorityQueue.Tree.NODE;,record PriorityQueue.Tree.NODE
    elt = (7,{}),
    rank = 0,
    trees = {}
end PriorityQueue.Tree.NODE;}
end PriorityQueue.Tree.NODE;}
""
(-2,{})
""
{record PriorityQueue.Tree.NODE
    elt = (1,{}),
    rank = 3,
    trees = {record PriorityQueue.Tree.NODE
    elt = (7,{}),
    rank = 2,
    trees = {record PriorityQueue.Tree.NODE
    elt = (11,{}),
    rank = 1,
    trees = {record PriorityQueue.Tree.NODE
    elt = (35,{}),
    rank = 0,
    trees = {}
end PriorityQueue.Tree.NODE;}
end PriorityQueue.Tree.NODE;,record PriorityQueue.Tree.NODE
    elt = (26,{}),
    rank = 0,
    trees = {}
end PriorityQueue.Tree.NODE;}
end PriorityQueue.Tree.NODE;,record PriorityQueue.Tree.NODE
    elt = (2,{}),
    rank = 1,
    trees = {record PriorityQueue.Tree.NODE
    elt = (4,{}),
    rank = 0,
    trees = {}
end PriorityQueue.Tree.NODE;}
end PriorityQueue.Tree.NODE;,record PriorityQueue.Tree.NODE
    elt = (3,{}),
    rank = 0,
    trees = {}
end PriorityQueue.Tree.NODE;}
end PriorityQueue.Tree.NODE;}
""
 + SimCodeTest                                                                       ... execution failed

==== Log /tmp/omc-rtest-marcus/openmodelica/bootstrapping/log-SimCodeTest.mos
 + SimplifyTest                                                                      ... ok [time:24]
 + SusanTest                                                                         ... ok [time:26]
 + System                                                                            ... ok [time:0]
 + UtilTest                                                                          ... ok [time:4]

== 5 out of 10 tests failed [openmodelica/bootstrapping, time: 102]
