inclu.PHONY : all omc release mosh clean .testvariables mkbuilddirs qtclean qtclean-common difftool modelica3d

top_builddir = .
builddir_app=$(top_builddir)/build/Applications/
builddir_bin=$(top_builddir)/build/bin
builddir_lib=$(top_builddir)/build/lib
builddir_inc=$(top_builddir)/build/include/omc
builddir_doc=$(top_builddir)/build/share/doc
builddir_share=$(top_builddir)/build/share/
builddir_man=$(top_builddir)/build/share/man/
builddir_java=$(top_builddir)/build/share/omc/java/
builddir_locale=$(top_builddir)/build/share/locale/

INSTALL_APPDIR     = ${DESTDIR}/Applications/MacPorts/
INSTALL_BINDIR     = ${DESTDIR}${bindir}
INSTALL_LIBDIR     = ${DESTDIR}${libdir}/
INSTALL_INCLUDEDIR = ${DESTDIR}${includedir}/omc
INSTALL_DATADIR    = ${DESTDIR}${datadir}
INSTALL_DOCDIR     = ${DESTDIR}${docdir}
INSTALL_SHAREDIR   = ${DESTDIR}${datadir}/
INSTALL_MANDIR     = ${DESTDIR}${datadir}/man/
INSTALL_JAVADIR    = ${DESTDIR}${datadir}/omc/java
INSTALL_LOCALEDIR  = ${DESTDIR}${datadir}/locale

.PHONY : interactive omc release qtclient mosh all mkbuilddirs fmi test install-dirs susan susan_all susgen sustst install-python install-openturns runtimeCPPinstall 

mkbuilddirs:
	if [ "$(EXE)" = ".app" ]; then mkdir -p $(builddir_app); fi
	mkdir -p $(builddir_bin)
	mkdir -p $(builddir_lib)/omc
	mkdir -p $(builddir_lib)/python
	mkdir -p $(builddir_lib)/python/omniORB
	mkdir -p $(builddir_inc)
	mkdir -p $(builddir_java)
	mkdir -p $(builddir_share)/omc/scripts/PythonInterface/OMPython/OMParser
	mkdir -p $(builddir_share)/omc/scripts/OpenTurns/
	mkdir -p $(builddir_doc)/omc/testmodels
	mkdir -p $(builddir_man)/man1/

release: omc 

install-python:
	(time $(MAKE) -C PythonInterface -f $(defaultMakefileTarget))

install-openturns: mkbuilddirs
	(time cp SimulationRuntime/OpenTurns/* $(builddir_share)/omc/scripts/OpenTurns/)

interactive: .testvariables mkbuilddirs
	$(MAKE) -C SimulationRuntime/interactive -f $(defaultMakefileTarget)
	# Depends on libinteractive.a
	$(MAKE) -C SimulationRuntime/c -f $(defaultMakefileTarget)

docs: mkbuilddirs omlibrary
	make -C Compiler/Translation release
	(cp -p doc/*.pdf doc/OpenModelicaAPI-Howto/*.pdf $(builddir_doc)/omc)
	(cp -p Examples/*.* $(builddir_doc)/omc/testmodels/)
	rm -f $(builddir_doc)/omc/testmodels/CMake*.txt
	cp -p ./SimulationRuntime/interactive/README.txt $(builddir_doc)/omc/OpenModelica-InteractiveSimulation-README.txt
	# man pages
	(cd doc/manpages/ && for f in *.1; do gzip $$f -c > ../../$(builddir_man)/man1/$$f.gz && touch -r $$f ../../$(builddir_man)/man1/$$f.gz; done)

boehm-gc: 3rdParty/gc-7.2/Makefile
	$(MAKE) -C 3rdParty/gc-7.2/
3rdParty/gc-7.2/Makefile: 3rdParty/gc-7.2/Makefile.in 3rdParty/gc-7.2/configure
	(cd 3rdParty/gc-7.2 && ./configure --enable-large-config CC="$(CC)" CXX="$(CXX)" CFLAGS="$(CFLAGS)")

fmi: interactive
	$(MAKE) -C SimulationRuntime/fmi/import -f $(defaultMakefileTarget)
	(cp -p SimulationRuntime/fmi/import/fmuWrapper.h SimulationRuntime/fmi/import/xmlparser.h $(builddir_inc))
	
fmiclean: 
	$(MAKE) -C SimulationRuntime/fmi/import/ -f $(defaultMakefileTarget) clean

opencl_rt: 
ifeq "$(OSTYPE)" "darwin"
else
	$(MAKE) -C SimulationRuntime/ParModelica/OpenCLRuntime -f $(defaultMakefileTarget)
endif

opencl_rt_clean: 
	$(MAKE) -C SimulationRuntime/ParModelica/OpenCLRuntime -f $(defaultMakefileTarget) clean
        
breakprocess:
	(cd testsuite/openmodelica/bootstrapping && time g++ BreakProcess.cpp -o BreakProcess -static-libgcc)
	(cd testsuite/openmodelica/bootstrapping && cp BreakProcess.exe ../../../$(builddir_bin)/)
	
runtimeCPP: 
	$(MAKE) -C SimulationRuntime/cpp/ -f $(defaultMakefileTarget)

runtimeCPPinstall: 
	$(MAKE) -C SimulationRuntime/cpp/ -f $(defaultMakefileTarget) install


testlibrariemsl31cpp:
	(cd testsuite/cppruntime/libraries/msl31 && time $(MAKE) -f Makefile > testsuite-msl31-cpp-trace.txt 2>&1)
	echo "log is in testsuite/openmodelica/cppruntime/libraries/msl31/testsuite-msl31-cpp-trace.txt" 
	
runtimeCPPclean: 
	$(MAKE) -C SimulationRuntime/cpp/ -f $(defaultMakefileTarget) clean

fmil:
	test -d 3rdParty/FMIL
	mkdir -p 3rdParty/FMIL/build
	(cd 3rdParty/FMIL/build && test -f Makefile || $(CMAKE) -D FMILIB_BUILD_SHARED_LIB:Bool=OFF -D FMILIB_BUILD_TESTS:Bool=OFF -D FMILIB_GENERATE_DOXYGEN_DOC:Bool=OFF -DCMAKE_COLOR_MAKEFILE:Bool=OFF -DFMILIB_INSTALL_PREFIX:String=../install .. -G $(CMAKE_TARGET))
	test -f 3rdParty/FMIL/build/libfmilib.a || $(MAKE) -C 3rdParty/FMIL/build
	test -d 3rdParty/FMIL/install || $(MAKE) -C 3rdParty/FMIL/build install
	cp -p 3rdParty/FMIL/install/lib/libfmilib.a $(builddir_lib)/omc/
	#TODO: Only copy required headers, add them in omc/fmi subfolder, and do not copy c/txt-files
	#cp -rp 3rdParty/FMIL/install/include/* $(builddir_inc)

testfast: test

test:
	(time $(MAKE) -C testsuite -f Makefile)

testlog:
	(time $(MAKE) -C testsuite -f Makefile > testsuite/testsuite-trace.txt 2>&1) || true
	echo "log is in testsuite/testsuite-trace.txt"
	cat testsuite/testsuite-trace.txt
	echo "Successful tests: "
	cat testsuite/testsuite-trace.txt | grep "... ok" | wc -l
	echo "Failed models: "
	cat testsuite/testsuite-trace.txt | grep "==== Log" | wc -l
	cat testsuite/testsuite-trace.txt | grep "==== Log" ; echo DONE!

testmos:
	(time $(MAKE) -C testsuite -f Makefile omc-diff)
	(time $(MAKE) -C testsuite/simulation/modelica/others -f Makefile)

testsimulation:
	(time $(MAKE) -C testsuite -f Makefile simulation)

testmo:
	(cd testsuite/flattening/modelica && time $(MAKE) -f Makefile test)
	
testmeta:
	(cd testsuite/metamodelica/meta && time $(MAKE) -f Makefile)
	(cd testsuite/flattening/modelica/records && time $(MAKE) -f Makefile)

testboot:
	(cd testsuite/openmodelica/bootstrapping && time ../../../build/bin/omc MainTest.mos)

t:
	(cd testsuite/metamodelica/meta && time ../../rtest -v SimplifyTest.mos)

testlibraries:
	(cd testsuite/simulation/libraries && time $(MAKE) -f Makefile)

testlibrariemsl31:
	(cd testsuite/simulation/libraries/msl31 && time $(MAKE) -f Makefile > testsuite-msl31-trace.txt 2>&1)
	echo "log is in testsuite/simulation/libraries/msl31/testsuite-msl31-trace.txt" 

testfmi:
	(cd testsuite/openmodelica/fmi && time $(MAKE) -f Makefile)
	
testSummary:
	(cd testsuite && time $(MAKE) -f Makefile | grep "==")
	
testPar:
	(cd testsuite/partest && time ./runtests.pl -j8)

mosh:
	$(MAKE) -C mosh/src -f $(defaultMakefileTarget)

susan: all sustst	

sustst:
	(cd Compiler/susan_codegen && $(MAKE) -f Makefile test)

OMLIBRARY_INTERNAL_DIRS=BioChem?1.0 Modelica?1.6 Modelica?2.2.1 ModelicaAdditions Modelica?3.1 ModelicaServices?1.0 ModelicaServices?1.0?modelica3d Modelica_LinearSystems2?2.0 SimpleFluid

omlibrary: build/lib/omlibrary/stamp modelica3d
build/lib/omlibrary/stamp: libraries/README
	rm -rf build/lib/omlibrary
	install -m755 -d "build/lib/omlibrary/Modelica 3.2.1" "build/lib/omlibrary/ModelicaServices 3.2.1" "build/lib/omlibrary/ModelicaReference 3.2.1" "build/lib/omlibrary/ModelicaTest 1.1"
	$(MAKE) -f $(defaultMakefileTarget) omlibrary-internal omlibrary-32 omlibrary-services omlibrary-reference omlibrary-test
	touch $@
omlibrary-internal:
	(cd libraries/ && find $(OMLIBRARY_INTERNAL_DIRS) -type d -not -path "*svn*" -exec install -m755 -d ../build/lib/omlibrary/{} \;)
	(cd libraries/ && find $(OMLIBRARY_INTERNAL_DIRS) -type f -not -path "*svn*" -exec install -m644 {} ../build/lib/omlibrary/{} \;)
omlibrary-32:
	(cd "libraries/Modelica 3.2.1/Modelica" && find . -type d -not -path "*svn*" -exec install -m755 -d "../../../build/lib/omlibrary/Modelica 3.2.1/{}" \;)
	(cd "libraries/Modelica 3.2.1/Modelica" && find . -type f -not -path "*svn*" -exec install -m644 {} "../../../build/lib/omlibrary/Modelica 3.2.1/{}" \;)
	install -m644 "libraries/Modelica 3.2.1/Complex.mo" "build/lib/omlibrary/Complex 3.2.1.mo"
	install -m644 "libraries/Modelica 3.2.1/ObsoleteModelica3.mo" "build/lib/omlibrary/ObsoleteModelica3 3.2.1.mo"
	patch -d build/lib/omlibrary -p3 < "libraries/Modelica 3.2.1.patch"
omlibrary-services:
	(cd "libraries/Modelica 3.2.1/ModelicaServices-Variants/Default/ModelicaServices" && find . -type d -not -path "*svn*" -exec install -m755 -d "../../../../../build/lib/omlibrary/ModelicaServices 3.2.1/{}" \;)
	(cd "libraries/Modelica 3.2.1/ModelicaServices-Variants/Default/ModelicaServices" && find . -type f -not -path "*svn*" -exec install -m644 {} "../../../../../build/lib/omlibrary/ModelicaServices 3.2.1/{}" \;)
omlibrary-reference:
	(cd "libraries/Modelica 3.2.1/ModelicaReference" && find . -type d -not -path "*svn*" -exec install -m755 -d "../../../build/lib/omlibrary/ModelicaReference 3.2.1/{}" \;)
	(cd "libraries/Modelica 3.2.1/ModelicaReference" && find . -type f -not -path "*svn*" -exec install -m644 {} "../../../build/lib/omlibrary/ModelicaReference 3.2.1/{}" \;)
omlibrary-test:
	(cd "libraries/Modelica 3.2.1/ModelicaTest" && find . -type d -not -path "*svn*" -exec install -m755 -d "../../../build/lib/omlibrary/ModelicaTest 3.2.1/{}" \;)
	(cd "libraries/Modelica 3.2.1/ModelicaTest" && find . -type f -not -path "*svn*" -exec install -m644 {} "../../../build/lib/omlibrary/ModelicaTest 3.2.1/{}" \;)

# Run this command to update the omlibrary patch. Add more libraries as needed
omlibrary-diff:
	diff -u -x .svn -r "libraries/Modelica 3.2.1/Modelica" "build/lib/omlibrary/Modelica 3.2.1" > "libraries/Modelica 3.2.1.patch" || echo "*** Modelica 3.2.1 has patch"

distclean: clean
	(cd Compiler && $(MAKE) -f $(defaultMakefileTarget) reallyclean)
	(cd Compiler/omc_release && $(MAKE) -f $(defaultMakefileTarget) reallyclean)
	rm -f Compiler/.depend
	rm -f OMShell/Makefile OMNotebook/ext/Makefile OMNotebook/OMNotebookQT4/Makefile
	rm -f $(autoconfGeneratedFiles)
	rm -f config.status config.log
	rm -rf build/
fmil-clean:
	rm -rf 3rdParty/FMIL/build 3rdParty/FMIL/install 3rdParty/FMIL/Makefile
clean: qtclean fmil-clean opencl_rt_clean
	(cd SimulationRuntime/c && $(MAKE) -f $(defaultMakefileTarget) clean)
	(cd SimulationRuntime/interactive && $(MAKE) -f $(defaultMakefileTarget) clean)
	(cd Compiler && $(MAKE) -f $(defaultMakefileTarget) clean)
	(cd Compiler/omc_release && $(MAKE) -f $(defaultMakefileTarget) clean)
	(cd mosh/src && $(MAKE) -f $(defaultMakefileTarget) clean)
	(cd PythonInterface && $(MAKE) -f $(defaultMakefileTarget) clean)
	$(MAKE) -C 3rdParty/modelica3d/build clean || true
	(rm -rf 3rdParty/modelica3d/build)
	(rm -rf SimulationRuntime/build_c)
	rm -rf build/share build/lib build/include build/bin/OMShell* build/bin/OMNotebook* \
	build/bin/omc build/bin/omc.exe build/bin/omc-diff build/bin/omc-diff.exe \
	bom-error.log bom-error.sh tab-error.log
install-dirs:
	@test ! "${DESTDIR}/${prefix}" -ef "${top_builddir}/build" || (echo Error: Install and build dirs are the same && false)
	if [ "$(EXE)" = ".app" ]; then mkdir -p ${INSTALL_APPDIR}; fi
	mkdir -p ${INSTALL_BINDIR}
	mkdir -p ${INSTALL_LIBDIR}
	mkdir -p ${INSTALL_INCLUDEDIR}
	mkdir -p ${INSTALL_DOCDIR}/omc/testmodels
	mkdir -p ${INSTALL_MANDIR}/man1/
	mkdir -p ${INSTALL_LOCALEDIR}
	test ! -d ${builddir_doc}/omedit/ || mkdir -p ${INSTALL_DOCDIR}/omedit/
	test ! -d ${builddir_share}/omnotebook/ || mkdir -p ${INSTALL_SHAREDIR}/omnotebook/
	test ! -d ${builddir_share}/omshell/nls/ || mkdir -p ${INSTALL_SHAREDIR}/omshell/nls/
	test ! -d ${builddir_share}/omedit/nls/ || mkdir -p ${INSTALL_SHAREDIR}/omedit/nls/
	mkdir -p ${INSTALL_SHAREDIR}/omc/scripts ${INSTALL_JAVADIR}

install: install-dirs install-python
	echo Installing OpenModelica...
	# Application directory (OSX)
	if [ "$(EXE)" = ".app" ]; then cp -rp ${builddir_app} $(INSTALL_APPDIR); fi
	# Binaries
	cp -rp ${builddir_bin}/* ${INSTALL_BINDIR}
	# Libraries
	cp -rp ${builddir_lib}/* ${INSTALL_LIBDIR}
	# Includes
	cp -rp ${builddir_inc}/* ${INSTALL_INCLUDEDIR}
	# License
	cp -p COPYING ${INSTALL_DOCDIR}/omc/
	# Documents
	cp -p ${builddir_doc}/omc/*.pdf ${INSTALL_DOCDIR}/omc/
	cp -p ${builddir_doc}/omc/*.txt ${INSTALL_DOCDIR}/omc/
	cp -p ${builddir_doc}/omc/testmodels/* ${INSTALL_DOCDIR}/omc/testmodels/
	test ! -d ${builddir_doc}/omedit/ || cp -p ${builddir_doc}/omedit/* ${INSTALL_DOCDIR}/omedit/
	# man pages
	cp -p ${builddir_man}/man1/*.gz ${INSTALL_MANDIR}/man1/
	# Shared data
	test ! -d ${builddir_share}/omnotebook/ || cp -rp ${builddir_share}/omnotebook/* ${INSTALL_SHAREDIR}/omnotebook/
	test ! -d ${builddir_share}/omshell/ || cp -p ${builddir_share}/omshell/*.xml ${INSTALL_SHAREDIR}/omshell/
	test ! -d ${builddir_share}/omshell/nls/ || cp -p ${builddir_share}/omshell/nls/*.qm ${INSTALL_SHAREDIR}/omshell/nls/
	test ! -d ${builddir_share}/omedit/nls/ || cp -p ${builddir_share}/omedit/nls/*.qm ${INSTALL_SHAREDIR}/omedit/nls/
	# Scripts
	cp -rp ${builddir_share}/omc/scripts/*.* ${builddir_share}/omc/scripts/OpenTurns ${INSTALL_SHAREDIR}/omc/scripts
	# Java
	cp -p ${builddir_java}/* ${INSTALL_JAVADIR}
	# Translations
	cp -rp ${builddir_locale}/* ${INSTALL_LOCALEDIR}/
