// name: cseFunctionCall2
// keywords: cse
// status: correct

loadString("
package CSE
  package functions
    function f2
      input Real x1;
      input Real x2;
      output Real y1;
      output Real y2;
   protected
      Integer z;
    algorithm
      y1 := if x1>x2 then sin(x1) else cos(x2);
      z := integer(ceil(y1));
      for i in 1:z loop
        y2 := y1+x1*x2;
      end for;
    end f2;
  end functions;
  
  model FunctionCallTest2
    import CSE.functions.*;
    Real x;
    Real a,b,c,d;
  equation
    x = sin(time*cos(time));
    (a,b) = f2(time, x);
    (c,d) = f2(time, x);
  end FunctionCallTest2;

end CSE;
"); getErrorString();

setDebugFlags("dumpCSE"); getErrorString();
setCommandLineOptions("--postOptModules+=wrapFunctionCalls"); getErrorString();
simulate(CSE.FunctionCallTest2); getErrorString();

// Result:
// true
// ""
// true
// ""
// true
// ""
//
// ########### Updated Variable List (simulation) ########### (7)
// ========================================
// 1: d:VARIABLE() .CSE.FunctionCallTest2, .Real type: Real 
// 2: c:VARIABLE() .CSE.FunctionCallTest2, .Real type: Real 
// 3: b:VARIABLE() .CSE.FunctionCallTest2, .Real type: Real 
// 4: a:VARIABLE() .CSE.FunctionCallTest2, .Real type: Real 
// 5: x:VARIABLE() .CSE.FunctionCallTest2, .Real type: Real 
// 6: $cse2:VARIABLE()  type: Real  unreplaceable
// 7: $cse1:VARIABLE()  type: Real  unreplaceable
//
//
// ########### Updated Equation List (simulation) ########### (6, 7)
// ========================================
// 1/1 (1): x = sin(time * cos(time))   [dynamic]
// 2/2 (1): b = $cse2   [dynamic]
// 3/3 (1): d = $cse2   [dynamic]
// 4/4 (1): c = $cse1   [dynamic]
// 5/5 (1): a = $cse1   [dynamic]
// 6/6 (2): ($cse1, $cse2) = CSE.functions.f2(time, x)   [binding]
//
// record SimulationResult
//     resultFile = "CSE.FunctionCallTest2_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'CSE.FunctionCallTest2', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = ""
// end SimulationResult;
// ""
// endResult
