all : release qtclients @OMSHELL_TERMINAL@

autoconfGeneratedFiles = @GENERATED_AUTOCONF_FILES@

prefix = @prefix@
exec_prefix = @exec_prefix@
bindir = @bindir@
libdir = @libdir@
includedir = @includedir@
datadir = @datadir@
docdir = @docdir@
CMAKE = CC=$(CC) CXX=$(CXX) cmake
CMAKE_TARGET = "Unix Makefiles"

defaultMakefileTarget = Makefile
QMAKE=@QMAKE@
EXE=@EXE@

CC=@CC@
CXX=@CXX@
CFLAGS=@CFLAGS@
CPPFLAGS=@CPPFLAGS@
CXXFLAGS=@CXXFLAGS@

include Makefile.common

# We don't need OMDEV hacks, but using the same Makefile sure is nice!
.testvariables:
settings:

difftool: mkbuilddirs
	$(MAKE) -C testsuite/difftool
omc: difftool interactive docs fmi fmil opencl_rt
	(cd Compiler && $(MAKE) -f Makefile release)

omcd: difftool interactive docs fmi fmil opencl_rt
	(cd Compiler && $(MAKE) -f Makefile debug)

boehm-gc-lib: build/lib/omc/libgc.so build/lib/omc/libgc.so.1 build/lib/omc/libgc.so.1.0.3
build/lib/omc/libgc.so: 3rdParty/gc-7.2/.libs/libgc.so mkbuilddirs
	cp -pP $< $@
build/lib/omc/libgc.so.1: 3rdParty/gc-7.2/.libs/libgc.so.1 3rdParty/gc-7.2/.libs/libgc.so mkbuilddirs
	cp -pP $< $@
build/lib/omc/libgc.so.1.0.3: 3rdParty/gc-7.2/.libs/libgc.so.1.0.3 build/lib/omc/libgc.so mkbuilddirs
	cp -pP $< $@
3rdParty/gc-7.2/.libs/libgc.so: 3rdParty/gc-7.2/Makefile
	$(MAKE) -C 3rdParty/gc-7.2/

qtclean-common:
	rm -rf OMShell/bin/OMShell$(EXE) OMShell/OMShellGUI/omc_communication.*
	rm -rf OMNotebook/bin/OMNotebook$(EXE) OMNotebook/OMNotebookGUI/omc_communication.*
	rm -rf OMOptim/build/OMOptim$(EXE) OMOptim/build/omc_communication.*
ifeq ($(QMAKE),)
qtclients:
	@echo "*** OpenModelica configured without support for Qt"
qtclean: qtclean-common
else ifeq (@IDLCMD@,)
qtclients:
	@echo "*** OpenModelica configured without support for CORBA"
qtclean: qtclean-common
else
omnotebook: mkbuilddirs omplot
	mkdir -p $(builddir_share)/omnotebook
	$(MAKE) -C OMNotebook/OMNotebookGUI -f Makefile.unix 
omshell: mkbuilddirs
	$(MAKE) -C OMShell/OMShellGUI -f Makefile.unix
omplot: mkbuilddirs
	$(MAKE) -C OMPlot/OMPlotGUI -f Makefile.unix
omedit: mkbuilddirs omplot
	$(MAKE) -C OMEdit/OMEditGUI -f Makefile.unix
ifeq (@with_paradiseo@,)
omoptim: mkbuilddirs
	@echo "*** OpenModelica configured without support for OMOptim (--without-paradisEO)"
else
omoptim: mkbuilddirs omoptimbasis
	$(MAKE) -C OMOptim/build -f Makefile.unix
omoptimbasis: mkbuilddirs
	$(MAKE) -C OMOptimBasis/build -f Makefile.unix
endif

qtclients: @OMNOTEBOOK@ omshell omedit omplot omoptim omoptimbasis

qtclean: qtclean-common
	$(MAKE) -C OMShell/OMShellGUI -f Makefile.unix clean
	$(MAKE) -C OMNotebook/OMNotebookGUI -f Makefile.unix clean
	$(MAKE) -C OMEdit/OMEditGUI -f Makefile.unix clean
	$(MAKE) -C OMPlot/OMPlotGUI -f Makefile.unix clean
	$(MAKE) -C OMOptim/build -f Makefile.unix clean
	$(MAKE) -C OMOptimBasis/build -f Makefile.unix clean
endif

modelica3d:
ifeq (@MODELICA3D@,)
	@echo Skipping Modelica3D
else
	cd 3rdParty/modelica3d && mkdir -p build
	cd 3rdParty/modelica3d/build && $(CMAKE) -DCMAKE_COLOR_MAKEFILE:Bool=OFF -DOSG_BACKEND=1 ..
	$(MAKE) -C 3rdParty/modelica3d/build
	cp -p 3rdParty/modelica3d/build/backends/osg-gtk/libm3d-osg-gtk.so 3rdParty/modelica3d/build/lib/proc3d/libproc3d.so build/lib/
	cp -p 3rdParty/modelica3d/lib/modcount/src/c/modcount.h 3rdParty/modelica3d/lib/modbus/src/c/modbus.h build/include/omc/
	cp -p 3rdParty/modelica3d/build/lib/modcount/libmodcount.a 3rdParty/modelica3d/build/lib/modbus/libmodbus.a build/lib/omc/
	mkdir -p build/lib/omlibrary-modelica3d/blender2.59 build/lib/omlibrary-modelica3d/osg-gtk/
	cp -p 3rdParty/modelica3d/examples/multibody/src/modelica/*.mo build/lib/omlibrary-modelica3d/
	cp -p 3rdParty/modelica3d/backends/blender2.59/dbus-server.py build/lib/omlibrary-modelica3d/blender2.59/
	cp -p 3rdParty/modelica3d/backends/osg-gtk/python/dbus-server.py build/lib/omlibrary-modelica3d/osg-gtk/
endif

fix-svn-eol-style:
	svn propset svn:eol-style LF `find testsuite/ Compiler/ libraries/ -name "*.mo" | grep -v parser/ParseModel | grep -v "[ ]" | grep -v "_temp[0-9]*"`
	svn propset svn:eol-style LF `find testsuite/ Compiler/ libraries/ -name "*.mos" | grep -v parser/ParseModel | grep -v "[ ]" | grep -v "_temp[0-9]*"`
	svn propset svn:eol-style LF `find testsuite/ Compiler/ libraries/ -name "*.tpl" | grep -v parser/ParseModel | grep -v "[ ]" | grep -v "_temp[0-9]*"`
	svn propset svn:eol-style LF `find SimulationRuntime/c Compiler/runtime/ libraries/ OMEdit/ OMNotebook/ | egrep "\.[ch]\$$|\.[ch]pp\$$" | grep -v "[ ]"`
	svn propset svn:eol-style LF `find . | grep /Makefile\$$`
	svn propset svn:eol-style LF `find . | grep /Makefile.in\$$`
fix-bom:
	find . -type f \( ! -path '*/.svn/*' -prune \) | while read file;do sed -i '1 s/^\xef\xbb\xbf//' "$$file";done 

SOURCE_DIRS=$(SOURCE_DIRS_UTF8) testsuite/flattening/libraries/3rdParty/HumMod
SOURCE_DIRS_UTF8=OM*/ Compiler/ SimulationRuntime/ mosh/ libraries/ `bash -c echo testsuite/flattening/libraries/3rdParty/{PlanarMechanics,siemens,SiemensPower,ThermoSysPro}` testsuite/openmodelica/modelicaML testsuite/AVM testsuite/simulation

bom-error:
	rm -f bom-error.log bom-error.sh
	echo "#!/bin/sh\ntest \"\`head -c3 \\\"\$$1\\\"\`\" = \"\`/bin/echo -ne \"\\xef\\xbb\\xbf\"\`\" && (echo \$$1 contains BOM >> bom-error.log)" > bom-error.sh
	find $(SOURCE_DIRS) -type f \( ! -path '*/.svn/*' -prune \) -exec sh bom-error.sh "{}" ';'
	@if test -e bom-error.log; then cat bom-error.log; fi
	@test ! -e bom-error.log
	rm -f bom-error.log bom-error.sh

tab-error:
	! find $(SOURCE_DIRS) -regextype posix-egrep -regex '.*\.(cpp|c|h|mo|tpl)$$' -exec echo -n "{} " ';' -exec grep -c "	" '{}' ';' | \
          grep -v " 0\$$" | egrep -v '/omc_release/|/omc_debug/|/omc_profiling/|/GenTest/|/antlr-3.2/|Parser/MetaModelica_|Parser/ParModelica_|Parser/Modelica_3_|Parser/ModelicaParser'

thumbsdb-error:
	! find . -name "Thumbs.db" | grep Thumbs.db

utf8-error:
	rm -f utf8-error.log*
	find $(SOURCE_DIRS_UTF8) -regextype posix-egrep -regex '.*\.(cpp|c|h|mo|tpl)$$' -exec bash -c "iconv -f UTF-8 -t UTF-8 '{}' -o /dev/null 2>utf8-error.log2 || (echo -n '{}: ' && head -n1 utf8-error.log2)"  ';' 2>&1 > utf8-error.log
	# Also detect some valid UTF-8 that were obviously fracked up by Eclipse on Windows.
	find $(SOURCE_DIRS_UTF8) -regextype posix-egrep -regex '.*\.(cpp|c|h|mo|tpl)$$' -exec bash -c "grep 'Link[^A-Za-z0-9_,.;&-]*ping' '{}' | grep -v Linköping && (echo '{}: Failed Linköping test')"  ';' 2>&1 >> utf8-error.log
	@cat utf8-error.log
	@test ! -s utf8-error.log
	rm -f utf8-error.log*

utf8-iconv:
	rm -f tmp
	find $(SOURCE_DIRS) -regextype posix-egrep -regex '.*\.(cpp|c|h|mo|tpl)$$' -exec bash -c "iconv -f UTF-8 -t UTF-8 '{}' -o /dev/null 2>tmp || (rm -f tmp && cp '{}' tmp && iconv -f ISO-8859-1 -t UTF-8 tmp -o '{}' && echo Converted {} to UTF-8)" ';'
	rm -f tmp

.PRECIOUS: Makefile

Makefile: Makefile.in config.status
	$(top_builddir)/config.status

config.status: configure
	./config.status -recheck
configure: configure.in
	autoconf
