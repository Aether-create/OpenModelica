// Note: Run with +g=MetaModelica

setCommandLineOptions({"+g=Modelica","+d=nogen"});
OpenModelica.Scripting.Internal.Time.timerTick(OpenModelica.Scripting.Internal.Time.RT_CLOCK_USER_RESERVED);
log:="BuildModelRecursive.html";
MSLVersion:="3.2";
runModelicaTest:=false;
ulimitOmc:="1200"; // 20 minutes to generate the C-code
ulimitExe:="180";  // 3 minutes to initialize and run the simulation
loadModel(Modelica,{MSLVersion});
getErrorString();

system("date +'%Y-%m-%d %H:%M:%S' > tmp.date");
dateAndTime:=readFile("tmp.date");
system("rm -f tmp.date");

if runModelicaTest then
  loadModel(ModelicaTest,{"3.2.1"});
  loadModelicaTest:="\nloadModel(ModelicaTest,{\"3.2.1\"});\n";
else
  loadModelicaTest:="";
end if;

system("rm -f Modelica");
system("ln -fs '"+getInstallationDirectoryPath()+"/lib/omlibrary/Modelica "+MSLVersion+"/' Modelica");
omc:=getInstallationDirectoryPath()+"/bin/omc";

a:={typeNameString(x) for x guard isExperiment(x) in if runModelicaTest then getClassNames(ModelicaTest,recursive=true,sort=true) else getClassNames(recursive=true,sort=true)};
getErrorString();

// writeFile("x",sum(s + "\n" for s in a));

print("Number of classes to build: " + String(size(a,1)));
system("rm -f Modelica* " + log);

/*** This is the stuff executed for each model ***/

min(writeFile(s + ".mos","
writeFile(\""+log+"\",\""+s+"\n\",append=true);
statFile := \""+s+".stat\";
writeFile(statFile,\"<tr><td bgcolor=\\\"#ff0000\\\">"+s+"</td></tr>\");getErrorString();
loadModel(Modelica,{\""+MSLVersion+"\"});"+loadModelicaTest+"
setCommandLineOptions(\"+d=nogen\"); setMatchingAlgorithm(\"PFPlusExt\"); setIndexReductionMethod(\"dynamicStateSelection\"); 
res:=buildModel("+s+");
greenColor := \"#00FF00\";
if res[1] == \"\" then
  err:=getErrorString();
  setCommandLineOptions(\"+d=scodeInstShortcut\");
  res:=buildModel("+s+");
  greenColor := \"#FFFF00\";
end if;
errFile:=\""+s+".err\";
simFile:=\""+s+".sim\";
err:=getErrorString();
system(\"rm -f \" + errFile);
writeFile(simFile,\"\");
if err <> \"\" then
  writeFile(errFile,err);
end if;

echo(false);
frontend :=OpenModelica.Scripting.Internal.Time.timerTock(OpenModelica.Scripting.Internal.Time.RT_CLOCK_FRONTEND);
backend  :=OpenModelica.Scripting.Internal.Time.timerTock(OpenModelica.Scripting.Internal.Time.RT_CLOCK_BACKEND);
simcode  :=OpenModelica.Scripting.Internal.Time.timerTock(OpenModelica.Scripting.Internal.Time.RT_CLOCK_SIMCODE);
templates:=OpenModelica.Scripting.Internal.Time.timerTock(OpenModelica.Scripting.Internal.Time.RT_CLOCK_TEMPLATES);
total    :=OpenModelica.Scripting.Internal.Time.timerTock(OpenModelica.Scripting.Internal.Time.RT_CLOCK_SIMULATE_TOTAL);
build    :=OpenModelica.Scripting.Internal.Time.timerTock(OpenModelica.Scripting.Internal.Time.RT_CLOCK_BUILD_MODEL);
frontend :=if frontend <> -1.0 then frontend-backend else -1.0;
backend  :=if backend <> -1.0 then backend-simcode else -1.0;
simcode  :=if simcode <> -1.0 then simcode-templates else -1.0;
templates:=if templates <> -1.0 then templates-build else -1.0;

OpenModelica.Scripting.Internal.Time.timerTick(OpenModelica.Scripting.Internal.Time.RT_CLOCK_USER_RESERVED);
simRes  := if res[1] == \"\" then false else 0 == system(\"ulimit -t "+ulimitExe+" ; ./"+s+" > \"+simFile+\" 2>&1\");
timeSim := OpenModelica.Scripting.Internal.Time.timerTock(OpenModelica.Scripting.Internal.Time.RT_CLOCK_USER_RESERVED);
timeSim := if simRes then timeSim else -1.0;
if simRes then
  system(\"touch "+s+".simsuccess\");
end if;

loadString(\"
function cell
  input Real time;
  input Boolean greenOnOk := false;
  input String greenColor := \\\"#00FF00\\\";
  output String str;
algorithm
  str := if time==-1.0 then \\\"<td bgcolor=\\\\\\\"#FF0000\\\\\\\">&nbsp;</td>\\\" else ((if greenOnOk then \\\"<td bgcolor=\\\\\\\"\\\" + greenColor + \\\"\\\\\\\">\\\" else \\\"<td>\\\") + 
    OpenModelica.Scripting.Internal.Time.readableTime(if time < 1e-5 then 0 else time)+\\\"</td>\\\");
end cell;
\");getErrorString();
sim:=readFile(simFile);
str:=\"<tr><td>\" + (if err <> \"\" then \"<a href=\"+errFile+\">"+s+"</a>\" else \""+s+"\") +
  (if sim <> \"\" then \" (<a href=\"+simFile+\">sim</a>)\" else \"\") +
  \"</td>\" +
  cell(timeSim,greenOnOk=true,greenColor=greenColor) +
  \"<td bgcolor=\\\"\"+(if res[1]<>\"\" then greenColor else \"#FF0000\")+\"\\\">\"+OpenModelica.Scripting.Internal.Time.readableTime(total)+\"</td>\" +
  sum(cell(d,greenColor=greenColor) for d in {frontend,backend,simcode,templates,build}) + \"</tr>\\n\";getErrorString();
writeFile(statFile,str);getErrorString();
") for s in a);
getErrorString();
results := system_parallel({"ulimit -t "+ulimitOmc+" ; " + omc + " " + s + ".mos" for s in a});
getErrorString();

echo(false);
system("rm -f " + log);
str:="<h1>Recursive BuildModel Test</h1>
<p>BuildModel Results: " + String(sum(if OpenModelica.Scripting.regularFileExists(s) then 1 else 0 for s in a)) + "/" + String(size(a,1)) + " succeeded</p>
<p>Simulation Results: " + String(sum(if OpenModelica.Scripting.regularFileExists(s + ".simsuccess") then 1 else 0 for s in a)) + "/" + String(size(a,1)) + " succeeded</p>
<p>Total time taken: "+OpenModelica.Scripting.Internal.Time.readableTime(OpenModelica.Scripting.Internal.Time.timerTock(OpenModelica.Scripting.Internal.Time.RT_CLOCK_USER_RESERVED))+"</p>
<p>OpenModelica Version: "+getVersion()+"</p>
<p>Test started: "+dateAndTime+"</p>
<p>Tested Library: Modelica "+getVersion(Modelica)+"</p>
<p>BuildModel time limit: "+ulimitOmc+"s</p>
<p>Simulation time limit: "+ulimitExe+"s</p>
<p>Flags: setCommandLineOptions(\"+d=nogen\"); setMatchingAlgorithm(\"PFPlusExt\"); setIndexReductionMethod(\"dynamicStateSelection\");</p>
";
writeFile(log,"<html><head><title>BuildModel Results</title></head><body>" + str);
writeFile(log,"<table><tr><th>Model</th><th>Simulate</th><th>Total buildModel</th><th>Frontend</th><th>Backend</th><th>SimCode</th><th>Templates</th><th>Compile</th></tr>",append=true);getErrorString();
writeFile(log,sum(readFile(s + ".stat") + "\n" for s in a),append=true);getErrorString();
writeFile(log,"</table></body></html>",append=true);getErrorString();
