// name: cseFunctionCall5
// keywords: cse
// status: correct

loadString("
package CSE
  package types
    record R
      Real r1;
      Integer r2;
    end R;
  end types;
  
  package functions
    function f3
      input Real x1;
      input Real x2;
      output types.R y;
    algorithm
      y.r1 := if x1>x2 then sin(x1) else cos(x2);
      y.r2 := integer(ceil(y.r1));
      for i in 1:y.r2 loop
        y.r1 := y.r1+x1*x2;
      end for;
    end f3;
    
    function f4
      input Real x1;
      input Real x2;
      input types.R r;
      output types.R y1;
      output Real y2;
    algorithm
      y1.r1 := if x1>x2 then sin(r.r1) else cos(r.r2);
      y1.r2 := integer(ceil(y1.r1));
      for i in 1:y1.r2 loop
        y1.r1 := y1.r1+x1*x2+r.r1*r.r2;
      end for;
      y2 := r.r1*r.r2;
    end f4;
  end functions;
  
  model FunctionCallTest5
    import CSE.functions.*;
    import CSE.types.*;
    Real x;
    R y,z;
    Real a,b;
  equation
    x = sin(time*cos(time));
    (y,a) = f4(time, x, f3(time, x));
    (z,b) = f4(time, x, f3(time, x));
  end FunctionCallTest5;

end CSE;
"); getErrorString();
setDebugFlags("dumpCSE"); getErrorString();
setCommandLineOptions("--postOptModules+=wrapFunctionCalls"); getErrorString();
simulate(CSE.FunctionCallTest5); getErrorString();

// Result:
// true
// ""
// true
// ""
// true
// ""
//
// ########### Updated Variable List (simulation) ########### (12)
// ========================================
// 1: b:VARIABLE()  type: Real 
// 2: a:VARIABLE()  type: Real 
// 3: z.r2:DISCRETE()  type: Integer 
// 4: z.r1:VARIABLE()  type: Real 
// 5: y.r2:DISCRETE()  type: Integer 
// 6: y.r1:VARIABLE()  type: Real 
// 7: x:VARIABLE()  type: Real 
// 8: $cse3:VARIABLE()  type: Real  unreplaceable
// 9: $cse2.r2:DISCRETE()  type: Integer  unreplaceable
// 10: $cse2.r1:VARIABLE()  type: Real  unreplaceable
// 11: $cse1.r2:DISCRETE()  type: Integer  unreplaceable
// 12: $cse1.r1:VARIABLE()  type: Real  unreplaceable
//
//
// ########### Updated Equation List (simulation) ########### (7, 12)
// ========================================
// 1/1 (1): x = sin(time * cos(time))   [dynamic]
// 2/2 (1): a = $cse3   [dynamic]
// 3/3 (1): b = $cse3   [dynamic]
// 4/4 (2): z = $cse2   [dynamic]
// 5/6 (2): y = $cse2   [dynamic]
// 6/8 (3): ($cse2, $cse3) = CSE.functions.f4(time, x, $cse1)   [binding]
// 7/11 (2): $cse1 = CSE.functions.f3(time, x)   [binding]
//
// record SimulationResult
//     resultFile = "CSE.FunctionCallTest5_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'CSE.FunctionCallTest5', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = ""
// end SimulationResult;
// ""
// endResult
