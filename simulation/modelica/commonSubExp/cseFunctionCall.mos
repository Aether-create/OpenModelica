// name: cseFunctionCall
// keywords: cse
// status: correct

loadString("
package CSE
  package types
    record R
      Real r1;
      Integer r2;
    end R;
  end types;

  package functions
    function f1
      input Real x1;
      input Real x2;
      output Real y;
   protected
      Integer z;
    algorithm
      y := if x1>x2 then sin(x1) else cos(x2);
      z := integer(ceil(y));
      for i in 1:z loop
        y := y+x1*x2;
      end for;
    end f1;

    function f2
      input Real x1;
      input Real x2;
      output Real y1;
      output Real y2;
   protected
      Integer z;
    algorithm
      y1 := if x1>x2 then sin(x1) else cos(x2);
      z := integer(ceil(y1));
      for i in 1:z loop
        y2 := y1+x1*x2;
      end for;
    end f2;

    function f3
      input Real x1;
      input Real x2;
      output types.R y;
    algorithm
      y.r1 := if x1>x2 then sin(x1) else cos(x2);
      y.r2 := integer(ceil(y.r1));
      for i in 1:y.r2 loop
        y.r1 := y.r1+x1*x2;
      end for;
    end f3;

    function f4
      input Real x1;
      input Real x2;
      input types.R r;
      output types.R y1;
      output Real y2;
    algorithm
      y1.r1 := if x1>x2 then sin(r.r1) else cos(r.r2);
      y1.r2 := integer(ceil(y1.r1));
      for i in 1:y1.r2 loop
        y1.r1 := y1.r1+x1*x2+r.r1*r.r2;
      end for;
      y2 := r.r1*r.r2;
    end f4;

    function f5
      input Real x1;
      input Real x2;
      input types.R r;
      output Real y1;
      output Real y2[2];
    protected
      Integer z;
    algorithm
      y1 := if x1>x2 then sin(x1) else cos(x2);
      z := integer(ceil(y1));
      for i in 1:z loop
        y1 := y1+x1*x2+r.r1*r.r2;
      end for;
      y2 := {r.r1,r.r2};
    end f5;

    function f6
      input Real x1;
      input Real x2;
      output types.R y;
    algorithm
      y.r1 := x1*x2;
      y.r2 := 42+23;
    end f6;
  end functions;

  model FunctionCallTest1
    import CSE.functions.*;
    Real x,y,z;
  equation
    x = sin(time*cos(time));
    der(y) = f1(time, x);
    der(z) = f1(time, x);
  end FunctionCallTest1;

  model FunctionCallTest2
    import CSE.functions.*;
    Real x;
    Real a,b,c,d;
  equation
    x = sin(time*cos(time));
    (a,b) = f2(time, x);
    (c,d) = f2(time, x);
  end FunctionCallTest2;

  model FunctionCallTest3
    import CSE.functions.*;
    Real x,y,z;
    Real a,b,c,d;
  equation
    x = sin(time*cos(time));
    der(y) = f2(time, x)+2;
    der(z) = f2(time, x)+2;

    (a,b) = f2(time, x);
    (c,d) = f2(time, x);
  end FunctionCallTest3;

  model FunctionCallTest4
    import CSE.functions.*;
    import CSE.types.*;
    Real x;
    R y,z;
  equation
    x = sin(time*cos(time));
    y = f3(time, x);
    z = f3(time, x);
  end FunctionCallTest4;

  model FunctionCallTest5
    import CSE.functions.*;
    import CSE.types.*;
    Real x;
    R y,z;
    Real a,b;
  equation
    x = sin(time*cos(time));
    (y,a) = f4(time, x, f3(time, x));
    (z,b) = f4(time, x, f3(time, x));
  end FunctionCallTest5;

  model FunctionCallTest6
    import CSE.functions.*;
    import CSE.types.*;
    Real x;
    Real y,z;
    Real a[2],b[2];
  equation
    x = sin(time*cos(time));
    (y,a) = f5(time, x, f3(time, x));
    (z,b) = f5(time, x, f3(time, x));
  end FunctionCallTest6;

  model FunctionCallTest7
    import CSE.functions.*;
    import CSE.types.*;
    Real x;
    Real y,z;
    Real a[2],b[2];
    R r;
  equation
    x = sin(time*cos(time))*r.r1;
    (y,a) = f5(time, x, f6(time, x));
    (z,b) = f5(time, x, f6(time, x));
    r = f6(time,time);
  end FunctionCallTest7;
end CSE;
"); getErrorString();

setDebugFlags("dumpCSE"); getErrorString();
setCommandLineOptions("--postOptModules+=wrapFunctionCalls"); getErrorString();

simulate(CSE.FunctionCallTest1); getErrorString();
simulate(CSE.FunctionCallTest2); getErrorString();
simulate(CSE.FunctionCallTest3); getErrorString();
simulate(CSE.FunctionCallTest4); getErrorString();
simulate(CSE.FunctionCallTest5); getErrorString();
simulate(CSE.FunctionCallTest6); getErrorString();
simulate(CSE.FunctionCallTest7); getErrorString();

// Result:
// true
// ""
// true
// ""
// true
// ""
//
// ########### Updated Variable List (simulation) ########### (4)
// ========================================
// 1: z:STATE(1)()  type: Real 
// 2: y:STATE(1)()  type: Real 
// 3: x:VARIABLE()  type: Real 
// 4: $cse1:VARIABLE()  type: Real  unreplaceable
//
//
// ########### Updated Equation List (simulation) ########### (4, 4)
// ========================================
// 1/1 (1): x = sin(time * cos(time))   [dynamic]
// 2/2 (1): der(y) = $cse1   [dynamic]
// 3/3 (1): der(z) = $cse1   [dynamic]
// 4/4 (1): $cse1 = CSE.functions.f1(time, x)   [binding]
//
// record SimulationResult
//     resultFile = "CSE.FunctionCallTest1_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'CSE.FunctionCallTest1', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = ""
// end SimulationResult;
// "Warning: The initial conditions are not fully specified. Use +d=initialization for more information.
// "
//
// ########### Updated Variable List (simulation) ########### (7)
// ========================================
// 1: d:VARIABLE()  type: Real 
// 2: c:VARIABLE()  type: Real 
// 3: b:VARIABLE()  type: Real 
// 4: a:VARIABLE()  type: Real 
// 5: x:VARIABLE()  type: Real 
// 6: $cse2:VARIABLE()  type: Real  unreplaceable
// 7: $cse1:VARIABLE()  type: Real  unreplaceable
//
//
// ########### Updated Equation List (simulation) ########### (6, 7)
// ========================================
// 1/1 (1): x = sin(time * cos(time))   [dynamic]
// 2/2 (1): b = $cse2   [dynamic]
// 3/3 (1): d = $cse2   [dynamic]
// 4/4 (1): c = $cse1   [dynamic]
// 5/5 (1): a = $cse1   [dynamic]
// 6/6 (2): ($cse1, $cse2) = CSE.functions.f2(time, x)   [binding]
//
// record SimulationResult
//     resultFile = "CSE.FunctionCallTest2_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'CSE.FunctionCallTest2', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = ""
// end SimulationResult;
// ""
//
// ########### Updated Variable List (simulation) ########### (9)
// ========================================
// 1: d:VARIABLE()  type: Real 
// 2: c:VARIABLE()  type: Real 
// 3: b:VARIABLE()  type: Real 
// 4: a:VARIABLE()  type: Real 
// 5: z:STATE(1)()  type: Real 
// 6: y:STATE(1)()  type: Real 
// 7: x:VARIABLE()  type: Real 
// 8: $cse2:VARIABLE()  type: Real  unreplaceable
// 9: $cse1:VARIABLE()  type: Real  unreplaceable
//
//
// ########### Updated Equation List (simulation) ########### (8, 9)
// ========================================
// 1/1 (1): x = sin(time * cos(time))   [dynamic]
// 2/2 (1): der(y) = 2.0 + ($cse1, $cse2)[1]   [dynamic]
// 3/3 (1): der(z) = 2.0 + ($cse1, $cse2)[1]   [dynamic]
// 4/4 (1): b = $cse2   [dynamic]
// 5/5 (1): d = $cse2   [dynamic]
// 6/6 (1): c = $cse1   [dynamic]
// 7/7 (1): a = $cse1   [dynamic]
// 8/8 (2): ($cse1, $cse2) = CSE.functions.f2(time, x)   [binding]
//
// record SimulationResult
//     resultFile = "CSE.FunctionCallTest3_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'CSE.FunctionCallTest3', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = ""
// end SimulationResult;
// "Warning: The initial conditions are not fully specified. Use +d=initialization for more information.
// "
//
// ########### Updated Variable List (simulation) ########### (7)
// ========================================
// 1: z.r2:DISCRETE()  type: Integer 
// 2: z.r1:VARIABLE()  type: Real 
// 3: y.r2:DISCRETE()  type: Integer 
// 4: y.r1:VARIABLE()  type: Real 
// 5: x:VARIABLE()  type: Real 
// 6: $cse1.r2:DISCRETE()  type: Integer  unreplaceable
// 7: $cse1.r1:VARIABLE()  type: Real  unreplaceable
//
//
// ########### Updated Equation List (simulation) ########### (4, 7)
// ========================================
// 1/1 (1): x = sin(time * cos(time))   [dynamic]
// 2/2 (2): y = $cse1   [binding]
// 3/4 (2): z = $cse1   [binding]
// 4/6 (2): $cse1 = CSE.functions.f3(time, x)   [binding]
//
// record SimulationResult
//     resultFile = "CSE.FunctionCallTest4_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'CSE.FunctionCallTest4', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = ""
// end SimulationResult;
// ""
//
// ########### Updated Variable List (simulation) ########### (12)
// ========================================
// 1: b:VARIABLE()  type: Real 
// 2: a:VARIABLE()  type: Real 
// 3: z.r2:DISCRETE()  type: Integer 
// 4: z.r1:VARIABLE()  type: Real 
// 5: y.r2:DISCRETE()  type: Integer 
// 6: y.r1:VARIABLE()  type: Real 
// 7: x:VARIABLE()  type: Real 
// 8: $cse3:VARIABLE()  type: Real  unreplaceable
// 9: $cse2.r2:DISCRETE()  type: Integer  unreplaceable
// 10: $cse2.r1:VARIABLE()  type: Real  unreplaceable
// 11: $cse1.r2:DISCRETE()  type: Integer  unreplaceable
// 12: $cse1.r1:VARIABLE()  type: Real  unreplaceable
//
//
// ########### Updated Equation List (simulation) ########### (7, 12)
// ========================================
// 1/1 (1): x = sin(time * cos(time))   [dynamic]
// 2/2 (1): a = $cse3   [dynamic]
// 3/3 (1): b = $cse3   [dynamic]
// 4/4 (2): z = $cse2   [dynamic]
// 5/6 (2): y = $cse2   [dynamic]
// 6/8 (3): ($cse2, $cse3) = CSE.functions.f4(time, x, $cse1)   [binding]
// 7/11 (2): $cse1 = CSE.functions.f3(time, x)   [binding]
//
// record SimulationResult
//     resultFile = "CSE.FunctionCallTest5_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'CSE.FunctionCallTest5', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = ""
// end SimulationResult;
// ""
//
// ########### Updated Variable List (simulation) ########### (12)
// ========================================
// 1: b[2]:VARIABLE()  type: Real  [2]
// 2: b[1]:VARIABLE()  type: Real  [2]
// 3: a[2]:VARIABLE()  type: Real  [2]
// 4: a[1]:VARIABLE()  type: Real  [2]
// 5: z:VARIABLE()  type: Real 
// 6: y:VARIABLE()  type: Real 
// 7: x:VARIABLE()  type: Real 
// 8: $cse3[2]:VARIABLE()  type: Real  [2] unreplaceable
// 9: $cse3[1]:VARIABLE()  type: Real  [2] unreplaceable
// 10: $cse2:VARIABLE()  type: Real  unreplaceable
// 11: $cse1.r2:DISCRETE()  type: Integer  unreplaceable
// 12: $cse1.r1:VARIABLE()  type: Real  unreplaceable
//
//
// ########### Updated Equation List (simulation) ########### (7, 12)
// ========================================
// 1/1 (1): x = sin(time * cos(time))   [dynamic]
// 2/2 (2): a = $cse3   [dynamic]
// 3/4 (2): b = $cse3   [dynamic]
// 4/6 (1): z = $cse2   [dynamic]
// 5/7 (1): y = $cse2   [dynamic]
// 6/8 (3): ($cse2, $cse3) = CSE.functions.f5(time, x, $cse1)   [binding]
// 7/11 (2): $cse1 = CSE.functions.f3(time, x)   [binding]
//
// record SimulationResult
//     resultFile = "CSE.FunctionCallTest6_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'CSE.FunctionCallTest6', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = ""
// end SimulationResult;
// ""
//
// ########### Updated Variable List (simulation) ########### (15)
// ========================================
// 1: r.r1:VARIABLE()  type: Real 
// 2: b[2]:VARIABLE()  type: Real  [2]
// 3: b[1]:VARIABLE()  type: Real  [2]
// 4: a[2]:VARIABLE()  type: Real  [2]
// 5: a[1]:VARIABLE()  type: Real  [2]
// 6: z:VARIABLE()  type: Real 
// 7: y:VARIABLE()  type: Real 
// 8: x:VARIABLE()  type: Real 
// 9: $cse5[2]:VARIABLE()  type: Real  [2] unreplaceable
// 10: $cse5[1]:VARIABLE()  type: Real  [2] unreplaceable
// 11: $cse4:VARIABLE()  type: Real  unreplaceable
// 12: $cse3.r2:DISCRETE()  type: Integer  unreplaceable
// 13: $cse3.r1:VARIABLE()  type: Real  unreplaceable
// 14: $cse2:VARIABLE()  type: Real  unreplaceable
// 15: $cse1:VARIABLE()  type: Real  unreplaceable
//
//
// ########### Updated Equation List (simulation) ########### (10, 15)
// ========================================
// 1/1 (1): x = $cse2 * r.r1   [dynamic]
// 2/2 (2): a = $cse5   [dynamic]
// 3/4 (2): b = $cse5   [dynamic]
// 4/6 (1): r.r1 = CSE.functions.f6_eval4(time, time)   [dynamic]
// 5/7 (1): z = $cse4   [dynamic]
// 6/8 (1): y = $cse4   [dynamic]
// 7/9 (3): ($cse4, $cse5) = CSE.functions.f5(time, x, $cse3)   [binding]
// 8/12 (2): $cse3 = CSE.functions.f6(time, x)   [binding]
// 9/14 (1): $cse2 = sin(time * $cse1)   [binding]
// 10/15 (1): $cse1 = cos(time)   [binding]
//
// record SimulationResult
//     resultFile = "CSE.FunctionCallTest7_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'CSE.FunctionCallTest7', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = ""
// end SimulationResult;
// ""
// endResult
