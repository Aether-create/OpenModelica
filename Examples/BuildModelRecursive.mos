// Note: Run with +g=MetaModelica

setCommandLineOptions("+d=nogen");
if not regularFileExists("CustomCommands.mos") then
  customCommands := "setCommandLineOptions(\"+d=nogen,initialization\");
setMatchingAlgorithm(\"PFPlusExt\");
setIndexReductionMethod(\"dynamicStateSelection\");";
  writeFile("CustomCommands.mos",customCommands);
end if;

// May be overridde by CustomCommands.mos
referenceFiles:=getInstallationDirectoryPath()+"/../testsuite/simulation/libraries/msl32/ReferenceFiles";
referenceFileExtension:="mat";
referenceFileNameDelimiter:=".";

runScript("CustomCommands.mos");
customCommandsStr := if regularFileExists("CustomCommands.mos") then ("Flags: <pre>" + escapeXML(readFile("CustomCommands.mos")) + "</pre>") else "";
library:=$TypeName(Modelica);
libraryVersion:="default";

setCommandLineOptions({"+g=Modelica","+d=nogen"});
OpenModelica.Scripting.Internal.Time.timerTick(OpenModelica.Scripting.Internal.Time.RT_CLOCK_USER_RESERVED);
log:="BuildModelRecursive.html";
ulimitOmc:="900"; // 15 minutes to generate the C-code
ulimitExe:="480"; // 8 minutes to initialize and run the simulation
ulimitMemory:="16000000";  // ~16GB memory at most
default_tolerance:=1e-6;
reference_reltol:=3e-3;
reference_reltolDiffMinMax:=3e-3;
reference_rangeDelta:=1e-3;
loadModel(library,{libraryVersion});
getErrorString();
libraryVersionRevision:=getVersion(library);
libraryVersionRevision := (if libraryVersionRevision == "" then libraryVersion else libraryVersionRevision) + (if regularFileExists(dirname(getSourceFile(library))+".last_change") then (" revision " + readFile(dirname(getSourceFile(library))+".last_change")) else "");
libraryString:=typeNameString(library);

system("date +'%Y-%m-%d %H:%M:%S' > tmp.date");
dateAndTime:=readFile("tmp.date");
system("rm -f tmp.date");

loadModelCommand:="\nrunScript(\"CustomCommands.mos\");\nloadModel("+libraryString+",{\""+libraryVersion+"\"});\n";

omc:=getInstallationDirectoryPath()+"/bin/omc";
dygraphs:=getInstallationDirectoryPath()+"/share/doc/omc/testmodels/dygraph-combined.js";

a:={typeNameString(x) for x guard isExperiment(x) in getClassNames(library,recursive=true,sort=true)};
getErrorString();

// writeFile("x",sum(s + "\n" for s in a));

print("Number of classes to build: " + String(size(a,1)));
system("rm -f *.o");
system("rm -f *.c");
system("rm -f *.h");
system("rm -rf "+libraryString+"*");
system("rm -rf files/ "+log);
mkdir("files");

/*** This is the stuff executed for each model ***/

min(writeFile(s + ".mos","
\""+s+"\";
echo(false);
loadString(\"
function cell
  input Real time;
  input Boolean greenOnOk := false;
  input String greenColor := \\\"#00FF00\\\";
  output String str;
algorithm
  str := if time==-1.0 then \\\"<td bgcolor=\\\\\\\"#FF0000\\\\\\\">&nbsp;</td>\\\" else ((if greenOnOk then \\\"<td bgcolor=\\\\\\\"\\\" + greenColor + \\\"\\\\\\\">\\\" else \\\"<td>\\\") + 
    OpenModelica.Scripting.Internal.Time.readableTime(if time < 1e-5 then 0 else time)+\\\"</td>\\\");
end cell;
function length input String str; output Integer len; external \\\"C\\\" len=ModelicaStrings_length(str); end length;
function substring input String str; input Integer i1,i2; output String out; external \\\"C\\\" out=ModelicaStrings_substring(str,i1,i2); end substring;
function firstPart input String str; input Integer maxLength := 4096; output String out; algorithm out := if length(str) < maxLength then str else (substring(str,1,maxLength) + \\\"\n... (output truncated, was \\\" + String(length(str)) + \\\" bytes)\\\"); end firstPart;
function csvFileToVariable
  input String str;
  output String out;
protected
  String matches[2];
algorithm
  (,matches) := OpenModelica.Scripting.regex(str,\\\"^.*[.]diff[.](.*)$\\\",2);
  out := matches[2];
end csvFileToVariable;
function testcase
  input Real time;
  input Boolean success;
  input String errXMLLong;
  output String str;
protected
  String errXML;
algorithm
  errXML := firstPart(errXMLLong,16*1024); // 16 kB log per test should be enough; increase if there is a good reason to do so
  str:=\\\"<testcase name=\\\\\\\""+s+"\\\\\\\" time=\\\\\\\"\\\"+String(time)+\\\"\\\\\\\">\\\"+(
    if not success then \\\"<error type=\\\\\\\"Failure\\\\\\\" />\\\"
    else \\\"\\\"
  )+(
    if errXML <> \\\"\\\" then (\\\"<system-out>\\\" + errXML + \\\"</system-out>\\\")
    else \\\"\\\"
  )+
  \\\"</testcase>\n\\\";
end testcase;
\");getErrorString();
statFile := \""+s+".stat\";
writeFile(\""+log+"\",\""+s+"\n\",append=true);
writeFile(statFile,\"<tr><td bgcolor=\\\"#ff0000\\\">"+s+"</td></tr>\");getErrorString();
writeFile(statFile + \".flat\", testcase(0,false,\"killed\"));getErrorString();
writeFile(statFile + \".compile\", testcase(0,false,\"killed\"));getErrorString();
writeFile(statFile + \".sim\", testcase(0,false,\"killed\"));getErrorString();
writeFile(statFile + \".verify\", testcase(0,false,\"killed\"));getErrorString();

outputFormat:=\"default\";
"+loadModelCommand+"
reference_reltol:="+String(reference_reltol)+";
reference_reltolDiffMinMax:="+String(reference_reltolDiffMinMax)+";
reference_rangeDelta:="+String(reference_rangeDelta)+";

referenceOK := false;
referenceFiles := \""+referenceFiles+"\";
referenceCell := if referenceFiles == \"\" then \"\" else \"<td>&nbsp;</td>\";
reference := \""+referenceFiles+"/"+OpenModelica.Scripting.stringReplace(s,".",referenceFileNameDelimiter)+"."+referenceFileExtension+"\";
referenceExists := referenceFiles <> \"\" and regularFileExists(reference);

// outputFormat can be overridden in CustomCommands.mos, so we set it to 'default' first
outputFormat := if outputFormat == \"default\" then (if referenceExists then \"mat\" else \"empty\") else outputFormat;

variableFilter := if referenceExists
  then sum((stringReplace(stringReplace(s,\"[\",\".\"),\"]\",\".\") + \"|\") for s in readSimulationResultVars(reference))
  else \".*\";

// Use twice as many output points as the experiment annotation suggests. Else aim for 5000 points.
(startTime,stopTime,tolerance,numberOfIntervals,stepSize):=getSimulationOptions("+s+",defaultTolerance="+String(default_tolerance)+",defaultNumberOfIntervals=2500);
numberOfIntervals := 2*numberOfIntervals;
res:=buildModel("+s+",tolerance=tolerance,outputFormat=outputFormat,numberOfIntervals=numberOfIntervals,variableFilter=variableFilter);

greenColor := \"#00FF00\";
errFile:=\"files/"+s+".err\";
simFile:=\"files/"+s+".sim\";
err:=getErrorString();
system(\"rm -f \" + errFile);
writeFile(simFile,\"\");
if err <> \"\" then
  writeFile(errFile,err);
end if;

frontend :=OpenModelica.Scripting.Internal.Time.timerTock(OpenModelica.Scripting.Internal.Time.RT_CLOCK_FRONTEND);
backend  :=OpenModelica.Scripting.Internal.Time.timerTock(OpenModelica.Scripting.Internal.Time.RT_CLOCK_BACKEND);
simcode  :=OpenModelica.Scripting.Internal.Time.timerTock(OpenModelica.Scripting.Internal.Time.RT_CLOCK_SIMCODE);
templates:=OpenModelica.Scripting.Internal.Time.timerTock(OpenModelica.Scripting.Internal.Time.RT_CLOCK_TEMPLATES);
total    :=OpenModelica.Scripting.Internal.Time.timerTock(OpenModelica.Scripting.Internal.Time.RT_CLOCK_SIMULATE_TOTAL);
build    :=OpenModelica.Scripting.Internal.Time.timerTock(OpenModelica.Scripting.Internal.Time.RT_CLOCK_BUILD_MODEL);
frontend :=if backend <> -1.0 then frontend-backend else frontend;
backend  :=if simcode <> -1.0 then backend-simcode else backend;
simcode  :=if templates <> -1.0 then simcode-templates else simcode;
templates:=if build <> -1.0 then templates-build else templates;
timeDiff := -1.0;

OpenModelica.Scripting.Internal.Time.timerTick(OpenModelica.Scripting.Internal.Time.RT_CLOCK_USER_RESERVED);
buildRes := res[1] <> \"\";
simRes  := if not buildRes then false else 0 == system(\"ulimit -t " +ulimitExe+" -v "+ulimitMemory+" ; ./"+s+" > \"+simFile+\" 2>&1\");

system(\"sed -i '300,$ d' '\" + simFile + \"'\"); // Only keep the top 300 lines
timeSim := OpenModelica.Scripting.Internal.Time.timerTock(OpenModelica.Scripting.Internal.Time.RT_CLOCK_USER_RESERVED);
if simRes then
  system(\"touch "+s+".simsuccess\");
  prefix := \"files/"+s+".diff\";
  if referenceExists then
    OpenModelica.Scripting.Internal.Time.timerTick(OpenModelica.Scripting.Internal.Time.RT_CLOCK_USER_RESERVED);
    (referenceOK,diffVars) := diffSimulationResults(\""+s+"_res.\"+outputFormat,reference,prefix,relTol=reference_reltol,relTolDiffMinMax=reference_reltolDiffMinMax,rangeDelta=reference_rangeDelta);
    if referenceOK then
      system(\"touch "+s+".verifysuccess\");
    end if;
    timeDiff := OpenModelica.Scripting.Internal.Time.timerTock(OpenModelica.Scripting.Internal.Time.RT_CLOCK_USER_RESERVED);
    diffFiles := {prefix + \".\" + var for var in diffVars};
    // Create a file containing only the calibrated variables, for easy display
    if not referenceOK then
      timeDiff := OpenModelica.Scripting.Internal.Time.timerTock(OpenModelica.Scripting.Internal.Time.RT_CLOCK_USER_RESERVED);
      referenceCell := \"<td bgcolor=\\\"#FF0000\\\">\"+OpenModelica.Scripting.Internal.Time.readableTime(timeDiff)+\", <a href=\\\"files/"+s+".diff.html\\\">\"+String(size(diffFiles,1))+\" failed</a></td>\";
      writeFile(\"files/"+s+".diff.html\",\"<html><body><h1>"+s+" differences from the reference file</h1><p>startTime: \"+String(startTime)+\"</p><p>stopTime: \"+String(stopTime)+\"</p><p>Simulated using tolerance: \"+String(tolerance)+\"</p><ul>\" + sum(\"<li>\"+csvFileToVariable(file)+\" <a href=\\\"\"+OpenModelica.Scripting.basename(file)+\".html\\\">(javascript)</a> <a href=\\\"\"+OpenModelica.Scripting.basename(file)+\".csv\\\">(csv)</a></li>\" for file in diffFiles) + \"</ul></body></html>\");
      {writeFile(prefix + \".\" + var + \".html\",\"<html>
<head>
<script type=\\\"text/javascript\\\" src=\\\"dygraph-combined.js\\\"></script>
    <style type=\\\"text/css\\\">
    #graphdiv {
      position: absolute;
      left: 10px;
      right: 10px;
      top: 40px;
      bottom: 10px;
    }
    </style>
</head>
<body>
<div id=\\\"graphdiv\\\"></div>
<p><input type=checkbox id=\\\"0\\\" checked onClick=\\\"change(this)\\\">
<label for=\\\"0\\\">reference</label>
<input type=checkbox id=\\\"1\\\" checked onClick=\\\"change(this)\\\">
<label for=\\\"1\\\">actual</label>
<input type=checkbox id=\\\"2\\\" checked onClick=\\\"change(this)\\\">
<label for=\\\"2\\\">high</label>
<input type=checkbox id=\\\"3\\\" checked onClick=\\\"change(this)\\\">
<label for=\\\"3\\\">low</label>
<input type=checkbox id=\\\"4\\\" checked onClick=\\\"change(this)\\\">
<label for=\\\"4\\\">error</label>
<input type=checkbox id=\\\"5\\\" onClick=\\\"change(this)\\\">
<label for=\\\"5\\\">actual (original)</label>
Parameters used for the comparison: Relative tolerance \"+String(reference_reltol)+\" (local), \"+String(reference_reltolDiffMinMax)+\" (relative to max-min). Range delta \"+String(reference_rangeDelta)+\".</p>
<script type=\\\"text/javascript\\\">
g = new Dygraph(document.getElementById(\\\"graphdiv\\\"),
                 \\\"\"+OpenModelica.Scripting.basename(prefix + \".\" + var+\".csv\")+\"\\\",{title: '\"+var+\"',
  legend: 'always',
  connectSeparatedPoints: true,
  xlabel: ['time'],
  y2label: ['error'],
  series : { 'error': { axis: 'y2' } },
  colors: ['blue','red','teal','lightblue','orange','black'],
  visibility: [true,true,true,true,true,false]
});
function change(el) {
  g.setVisibility(parseInt(el.id), el.checked);
}
</script>
</body>
</html>\") for var in diffVars};

    else
      referenceCell := \"<td bgcolor=\\\"#00FF00\\\">\"+OpenModelica.Scripting.Internal.Time.readableTime(timeDiff)+\"</td>\";
    end if;
  end if;
end if;

sim:=readFile(simFile);
str:=\"<tr><td>\" + (if err <> \"\" then \"<a href=\\\"\"+errFile+\"\\\">"+s+"</a>\" else \""+s+"\") +
  (if sim <> \"\" then \" (<a href=\\\"\"+simFile+\"\\\">sim</a>)\" else \"\") +
  \"</td>\" + referenceCell +
  cell(if simRes then timeSim else -1.0,greenOnOk=true,greenColor=greenColor) +
  \"<td bgcolor=\\\"\"+(if res[1]<>\"\" then greenColor else \"#FF0000\")+\"\\\">\"+OpenModelica.Scripting.Internal.Time.readableTime(total)+\"</td>\" +
  sum(cell(d,greenColor=greenColor) for d in {frontend,backend,simcode,templates,build}) + \"</tr>\\n\";getErrorString();
writeFile(statFile,str);getErrorString();
errXML:=escapeXML(err);
skip:=\"<testcase name=\\\""+s+"\\\"><skipped /></testcase>\";
str:=testcase(frontend,backend <> -1.0,errXML);
writeFile(statFile + \".flat\", str);getErrorString();
str:=if backend <> -1.0 then testcase(total,buildRes,errXML) else skip;
writeFile(statFile + \".compile\", str);getErrorString();
str:=if buildRes then testcase(timeSim,simRes,escapeXML(sim)) else skip;
writeFile(statFile + \".sim\", str);getErrorString();
str:=if simRes then testcase(timeDiff,referenceOK,if referenceOK then \"\" else \"See the generated report for details\") else skip;
writeFile(statFile + \".verify\", str);getErrorString();
") for s in a);
getErrorString();
results := system_parallel({"ulimit -t "+ulimitOmc+" -v "+ulimitMemory+" ; " + omc + " " + s + ".mos" for s in a});
getErrorString();

system("rm -f " + log);
nsucceeded := String(sum(if OpenModelica.Scripting.regularFileExists(s) then 1 else 0 for s in a)) + "/" + String(size(a,1));
nsimsucceeded := String(sum(if OpenModelica.Scripting.regularFileExists(s + ".simsuccess") then 1 else 0 for s in a)) + "/" + String(size(a,1));
nverifysucceeded := String(sum(if OpenModelica.Scripting.regularFileExists(s + ".verifysuccess") then 1 else 0 for s in a)) + "/" + String(size(a,1));
str:="<h1>Recursive BuildModel Test</h1>
<p>BuildModel Results: " + nsucceeded + " succeeded</p>
<p>Simulation Results: " + nsimsucceeded + " succeeded</p>"+(if referenceFiles<> "" then "
<p>Verified Results: " + nverifysucceeded + " succeeded</p>" else "")+"
<p>Total time taken: "+OpenModelica.Scripting.Internal.Time.readableTime(OpenModelica.Scripting.Internal.Time.timerTock(OpenModelica.Scripting.Internal.Time.RT_CLOCK_USER_RESERVED))+"</p>
<p>OpenModelica Version: "+OpenModelica.Scripting.getVersion()+"</p>
<p>Test started: "+dateAndTime+"</p>
<p>Tested Library: "+libraryString+" "+libraryVersionRevision+"</p>
<p>BuildModel time limit: "+ulimitOmc+"s</p>
<p>Simulation time limit: "+ulimitExe+"s</p>
<p>Memory limit: "+ulimitMemory+"kB</p>
<p>Default tolerance: "+String(default_tolerance)+"</p>"
+ customCommandsStr +
"<p>Links are provided if getErrorString() or the simulation generates output. <font style=\"background-color:#00FF00\">Green</font> means success. <font style=\"background-color:#FF0000\">Red</font> is bad and in general signifies a failure.</p>
";
writeFile(log,"<html><head><title>BuildModel Results</title></head><body>" + str);
writeFile(log,"<table><tr><th>Model</th>"+(if referenceFiles == "" then "" else "<th>Verified</th>")+"<th>Simulate</th><th>Total buildModel</th><th>Frontend</th><th>Backend</th><th>SimCode</th><th>Templates</th><th>Compile</th></tr>\n",append=true);getErrorString();
writeFile(log,sum(readFile(s + ".stat") + "\n" for s in a),append=true);getErrorString();
writeFile(log,"</table><hr /><p><a href=\"BuildModelRecursive.tar.gz\">Offline version</a></p></body></html>",append=true);getErrorString();

{writeFile("BuildModelRecursive." + phase + ".xml.tmp", "<testsuite>\n" + sum(readFile(s + ".stat." + phase) for s in a) + "</testsuite>\n") for phase in {"flat","compile","sim","verify"}};getErrorString();
{system("iconv -f utf8 -t utf8 -c BuildModelRecursive." + phase + ".xml.tmp -o BuildModelRecursive." + phase + ".xml") for phase in {"flat","compile","sim","verify"}};getErrorString();

system("cp '" + dygraphs + "' files/");getErrorString();
system("rm -f tidy.err; for f in files/*.err; do (grep -v 'Duplicate modification of element' $f | sed s,^.*omlibrary/,[, | grep -v 'Error building simulator' | grep -v 'has no value, and is fixed during initialization' | grep -5E '(Warning|Error|Notification):' > tmp.tidy && test -s tmp.tidy && (basename $f && cat tmp.tidy)) >> tidy.err; done");
system("chmod -R go+r BuildModelRecursive.html files tidy.err");getErrorString();
system("chmod go+x files");getErrorString();
system("tar czf BuildModelRecursive.tar.gz BuildModelRecursive.html files tidy.err");getErrorString();
system("chmod go+r BuildModelRecursive.tar.gz");
