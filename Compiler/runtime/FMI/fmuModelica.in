class fmiCallbacks "Construct for callbacks defined in FMU"
  extends ExternalObject;
    function constructor
      output fmiCallbacks callbacks;
      external "C" callbacks = jm_callbacks() annotation(Library = {"fmilib"});
    end constructor;
    
    function destructor
    end destructor;
end fmiCallbacks;
  
class fmiImportContext
  extends ExternalObject;
    function constructor
      input fmiCallbacks callbacks;
      output fmiImportContext context;
      external "C" context = fmi_import_allocate_context(callbacks) annotation(Library = {"fmilib"});
    end constructor;
    
    function destructor
      input fmiImportContext context;
      external "C" fmi_import_free_context(context) annotation(Library = {"fmilib"});
    end destructor;
end fmiImportContext;

class fmiImportInstance
  extends ExternalObject;
    function constructor
      input fmiImportContext context;
      input String tempPath;
      output fmiImportInstance fmu;
      external "C" fmu = fmi1_import_parse_xml(context, tempPath) annotation(Library = {"fmilib"});
    end constructor;
    
    function destructor
      input fmiImportInstance fmu;
      external "C" fmi1_import_free(fmu) annotation(Library = {"fmilib"});
    end destructor;
end fmiImportInstance;

class fmiModel
  extends ExternalObject;
    function constructor
      input fmiImportInstance fmu;
      input String instanceName;
      output Integer status;
      external "C" status = fmi1_import_instantiate_model(fmu, instanceName) annotation(Library = {"fmilib"});
    end constructor;
    function destructor
      input fmiImportInstance fmu;
      external "C" fmi1_import_free_model_instance(fmu) annotation(Library = {"fmilib"});
    end destructor;
end fmiModel;

protected
package fmiStatus
  constant Integer fmiOK=0;
  constant Integer fmiWarning=1;
  constant Integer fmiDiscard=2;
  constant Integer fmiError=3;
  constant Integer fmiFatal=4;
  constant Integer fmiPending=5;
end fmiStatus;

package jmStatus
  constant Integer jmError=0;
  constant Integer jmSuccess=1;
  constant Integer jmWarning=2;
end jmStatus;

block FMUBlock
  constant String tempPath = "c:/TestModels/FMI/FmuExtract/";
  constant String dllPath = "c:/TestModels/FMI/FmuExtract//binaries/win32/bouncingBall.dll";
  constant String instName = "bouncingBall";
  constant String guid = "{8c4e810f-3df3-4a00-8276-176fa3c9f003}";
  parameter Boolean logFlag = false;
  parameter Boolean tolControl = true;
  Real h(start = 1.0, fixed = true) "height, used as state";
  Real der_h_ "velocity of ball";
  Real v "velocity of ball, used as state";
  Real der_v_ "acceleration of ball";
  parameter Real g(start = 9.81, fixed = true) = 9.81 "acceleration of gravity";
  parameter Real e(start = 0.7, fixed = true) = 0.7 "dimensionless parameter";
  parameter Integer nx_bouncingBall = 2;
  Real out_x_bouncingBall[nx_bouncingBall];
  replaceable Real x_bouncingBall[nx_bouncingBall];
protected 
  Real realV[4];
  parameter Integer realVR[4] = {0,1,2,3};
  parameter Integer nz_bouncingBall = 1;
  Real z_bouncingBall[nz_bouncingBall];
  Boolean flagSE_bouncingBall[nz_bouncingBall] "flag for state events";
  replaceable parameter Real relTol = 0.0001;
  parameter Integer default_bouncingBall = 0;
  fmiCallbacks callbacks = fmiCallbacks();
  fmiImportContext context = fmiImportContext(callbacks);
  fmiImportInstance fmu = fmiImportInstance(context, tempPath);
  fmiModel modelInstance = fmiModel(fmu, instName);
end FMUBlock;