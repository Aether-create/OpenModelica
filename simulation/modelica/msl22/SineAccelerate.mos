// name:     SineAccelerate
// keywords: Simulate, readSimulationData
// status:   correct
// cflags:   +std=2.x
// teardown_command: rm -f TestModels.RotationalModels.SpringInertia.SineAccelerate* output.log
// 
//  Simulate Rotational inertias with springs 
//
loadModel(Modelica,{"2.2.2"});
loadFile("TestModels.mo");

// SineAccelerate
simulate(TestModels.RotationalModels.SpringInertia.SineAccelerate, tolerance=1e-5, numberOfIntervals=100);
{val(inertia1.w,0.0),val(inertia1.w,0.2),val(inertia1.w,0.4),
val(inertia1.w,0.6),val(inertia1.w,0.8),val(inertia1.w,1.0)};
{val(inertia1.phi,0.0),val(inertia1.phi,0.2),val(inertia1.phi,0.4),
val(inertia1.phi,0.6),val(inertia1.phi,0.8),val(inertia1.phi,1.0)};

// Result:
// true
// true
// record SimulationResult
//     resultFile = "TestModels.RotationalModels.SpringInertia.SineAccelerate_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 100, tolerance = 0.00001, method = 'dassl', fileNamePrefix = 'TestModels.RotationalModels.SpringInertia.SineAccelerate', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = ""
// end SimulationResult;
// {0.0,0.4261485910318657,0.7755421983680616,0.9722959528708138,0.9776849598981299,0.7906475400020281}
// {0.0,0.04263831620012086,0.16485438179999798,0.34261814596015383,0.540940581396472,0.7207843421178467}
// endResult
