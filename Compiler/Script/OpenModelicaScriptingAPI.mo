/*
 * This file is automatically generated from ModelicaBuiltin.mo
 * TODO: Actually generate this from that...
 */

encapsulated package OpenModelicaScriptingAPI

import Absyn;
import CevalScript;
import GlobalScript;
import Parser;

protected

constant Absyn.Msg dummyMsg = Absyn.MSG(SOURCEINFO("<interactive>",false,1,1,1,1,0.0));

public

function getClassInformation
  input GlobalScript.SymbolTable st;
  input String className;
  output GlobalScript.SymbolTable outSymTab;
  output String restriction;
  output String comment;
  output Boolean partialPrefix;
  output Boolean finalPrefix;
  output Boolean encapsulatedPrefix;
  output String fileName;
  output Boolean fileReadOnly;
  output Integer lineNumberStart;
  output Integer columnNumberStart;
  output Integer lineNumberEnd;
  output Integer columnNumberEnd;
  output list<String> dimensions;
protected
  Absyn.Path className_path := Parser.stringPath(className);
  Values.Value val;
  list<Values.Value> dimensions_values;
algorithm
  (_,val,outSymTab) := CevalScript.cevalInteractiveFunctions2(FCore.emptyCache(), FGraph.empty(), "getClassInformation", {Values.CODE(Absyn.C_TYPENAME(className_path))}, st, dummyMsg);
  Values.TUPLE({
    Values.STRING(restriction),
    Values.STRING(comment),
    Values.BOOL(partialPrefix),
    Values.BOOL(finalPrefix),
    Values.BOOL(encapsulatedPrefix),
    Values.STRING(fileName),
    Values.BOOL(fileReadOnly),
    Values.INTEGER(lineNumberStart),
    Values.INTEGER(columnNumberStart),
    Values.INTEGER(lineNumberEnd),
    Values.INTEGER(columnNumberEnd),
    Values.ARRAY(dimensions_values)
  }) := val;
  dimensions := list(match v case Values.STRING() then v.string; end match for v in dimensions_values);
end getClassInformation;

annotation(__OpenModelica_Interface="backend");
end OpenModelicaScriptingAPI;
